#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 3.100
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => '/var/cpanel/templates/dovecotSSL/main.default',
        'modtime' => '1729506215',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;

    eval { BLOCK: {
$output .=  '##
## SSL settings
##

# SSL/TLS support: yes, no, required. <doc/wiki/SSL.txt>';
#line 10 "/var/cpanel/templates/dovecotSSL/main.default"
if ($stash->get(['ssl', 0, 'defined', 0])) {
$output .=  '
ssl = ';
#line 7 "/var/cpanel/templates/dovecotSSL/main.default"
$output .=  $stash->get('ssl');
}
else {
$output .=  '
#ssl = yes';
}

$output .=  '

# PEM encoded X.509 SSL/TLS certificate and private key. They\'re opened before
# dropping root privileges, so keep the key file unreadable by anyone but
# root. Included doc/mkcert.sh can be used to easily generate self-signed
# certificate, just make sure to update the domains in dovecot-openssl.cnf';
#line 20 "/var/cpanel/templates/dovecotSSL/main.default"
if ($stash->get(['ssl_cert_file', 0, 'defined', 0])) {
$output .=  '
ssl_cert = <';
#line 17 "/var/cpanel/templates/dovecotSSL/main.default"
$output .=  $stash->get('ssl_cert_file');
}
else {
$output .=  '
#ssl_cert = </etc/dovecot/ssl/dovecot.crt';
}

$output .=  '
';
#line 26 "/var/cpanel/templates/dovecotSSL/main.default"
if ($stash->get(['ssl_key_file', 0, 'defined', 0])) {
$output .=  '
ssl_key = <';
#line 23 "/var/cpanel/templates/dovecotSSL/main.default"
$output .=  $stash->get('ssl_key_file');
}
else {
$output .=  '
#ssl_key = </etc/dovecot/ssl/dovecot.key';
}

$output .=  '

# If key file is password protected, give the password here. Alternatively
# give it when starting dovecot with -p parameter.';
#line 34 "/var/cpanel/templates/dovecotSSL/main.default"
if ($stash->get(['ssl_key_password', 0, 'defined', 0])) {
$output .=  '
ssl_key_password = ';
#line 31 "/var/cpanel/templates/dovecotSSL/main.default"
$output .=  $stash->get('ssl_key_password');
}
else {
$output .=  '
#ssl_key_password =';
}

$output .=  '

# PEM encoded trusted certificate authority. Set this only if you intend to use
# ssl_verify_client_cert=yes. The file should contain the CA certificate(s)
# followed by the matching CRL(s). (e.g. ssl_ca = </etc/ssl/certs/ca.pem)';
#line 43 "/var/cpanel/templates/dovecotSSL/main.default"
if ($stash->get(['ssl_ca_file', 0, 'defined', 0])) {
$output .=  '
ssl_ca = <';
#line 40 "/var/cpanel/templates/dovecotSSL/main.default"
$output .=  $stash->get('ssl_ca_file');
}
else {
$output .=  '
#ssl_ca =';
}

$output .=  '

# Request client to send a certificate. If you also want to require it, set
# auth_ssl_require_client_cert=yes in auth section.';
#line 51 "/var/cpanel/templates/dovecotSSL/main.default"
if ($stash->get(['ssl_verify_client_cert', 0, 'defined', 0])) {
$output .=  '
ssl_verify_client_cert = ';
#line 48 "/var/cpanel/templates/dovecotSSL/main.default"
$output .=  $stash->get('ssl_verify_client_cert');
}
else {
$output .=  '
#ssl_verify_client_cert = no';
}

$output .=  '

# Which field from certificate to use for username. commonName and
# x500UniqueIdentifier are the usual choices. You\'ll also need to set
# auth_ssl_username_from_cert=yes.';
#line 60 "/var/cpanel/templates/dovecotSSL/main.default"
if ($stash->get(['ssl_cert_username_field', 0, 'defined', 0])) {
$output .=  '
ssl_cert_username_field = ';
#line 57 "/var/cpanel/templates/dovecotSSL/main.default"
$output .=  $stash->get('ssl_cert_username_field');
}
else {
$output .=  '
#ssl_cert_username_field = commonName';
}

$output .=  '

# Minimum SSL protocol version to use. Potentially recognized values are SSLv3,
# TLSv1, TLSv1.1, and TLSv1.2, depending on the OpenSSL version used.';
#line 68 "/var/cpanel/templates/dovecotSSL/main.default"
if ($stash->get(['ssl_min_protocol', 0, 'defined', 0])) {
$output .=  '
ssl_min_protocol = ';
#line 65 "/var/cpanel/templates/dovecotSSL/main.default"
$output .=  $stash->get('ssl_min_protocol');
}
else {
$output .=  '
#ssl_min_protocol = TLSv1';
}

$output .=  "\n\n# SSL ciphers to use, the default is:\n#ssl_cipher_list = ALL:!kRSA:!SRP:!kDHd:!DSS:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4:!ADH:!LOW\@STRENGTH\n# To disable non-EC DH, use:\n#ssl_cipher_list = ALL:!DH:!kRSA:!SRP:!kDHd:!DSS:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4:!ADH:!LOW\@STRENGTH";
#line 78 "/var/cpanel/templates/dovecotSSL/main.default"
if ($stash->get(['ssl_cipher_list', 0, 'defined', 0])) {
$output .=  '
ssl_cipher_list = ';
#line 75 "/var/cpanel/templates/dovecotSSL/main.default"
$output .=  $stash->get('ssl_cipher_list');
}
else {
$output .=  '
#ssl_cipher_list = ALL:!LOW:!SSLv2';
}

$output .=  '

# Colon separated list of elliptic curves to use. Empty value (the default)
# means use the defaults from the SSL library. P-521:P-384:P-256 would be an
# example of a valid value.
#ssl_curve_list =

# Prefer the server\'s order of ciphers over client\'s.
#ssl_prefer_server_ciphers = no

# SSL crypto device to use, for valid values run "openssl engine"
#ssl_crypto_device =

# SSL extra options. Currently supported options are:
#   compression - Enable compression.
#   no_ticket - Disable SSL session tickets.
#ssl_options =

# Show protocol level SSL errors.';
#line 101 "/var/cpanel/templates/dovecotSSL/main.default"
if ($stash->get(['verbose_ssl', 0, 'defined', 0])) {
$output .=  '
verbose_ssl = ';
#line 98 "/var/cpanel/templates/dovecotSSL/main.default"
$output .=  $stash->get('verbose_ssl');
}
else {
$output .=  '
#verbose_ssl = no';
}

$output .=  '
';
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {

    },
});
