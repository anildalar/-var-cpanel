#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 3.100
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1729506215',
        'name' => '/var/cpanel/templates/dovecot/main.default',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;

    eval { BLOCK: {
$output .=  '## Dovecot configuration file

# NOTICE FOR CPANEL SYSTEMS
# On cPanel servers this file is generated by combining a
# template at /var/cpanel/templates/dovecot/main.default
# and a datastore at /var/cpanel/conf/dovecot/main
#
# The template may be customized by making a copy of it at
# /var/cpanel/templates/dovecot/main.local
# similar to the way in which httpd.conf can be customized
#
# Direct edits of the rendered dovecot.conf file will not
# be preserved when dovecot is updated.  Use the
# "Mailserver Configuration" interface in WebHostManager instead.


# If you\'re in a hurry, see http://wiki2.dovecot.org/QuickConfiguration

# "doveconf -n" command gives a clean output of the changed settings. Use it
# instead of copy&pasting files when posting to the Dovecot mailing list.

# \'#\' character and everything after it is treated as comments. Extra spaces
# and tabs are ignored. If you want to use either of these explicitly, put the
# value inside quotes, eg.: key = "# char and trailing whitespace  "

# Most (but not all) settings can be overridden by different protocols and/or
# source/destination IPs by placing the settings inside sections, for example:
# protocol imap { }, local 127.0.0.1 { }, remote 10.0.0.0/8 { }

# Default values are shown for each setting, it\'s not required to uncomment
# those. These are exceptions to this though: No sections (e.g. namespace {})
# or plugin settings are added by default, they\'re listed only as examples.
# Paths are also just examples with the real defaults being based on configure
# options. The paths listed here are for configure --prefix=/usr
# --sysconfdir=/etc --localstatedir=/var

# Base directory where to store runtime data.';
#line 42 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['base_dir', 0, 'defined', 0])) {
$output .=  '
base_dir = ';
#line 39 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('base_dir');
}
else {
$output .=  '
#base_dir = /var/run/dovecot';
}

$output .=  '

# Protocols we want to be serving: imap pop3
# If you only want to use dovecot-auth, you can set this to "none".';
#line 50 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocols', 0, 'length', 0])) {
$output .=  '
protocols = lmtp ';
#line 47 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocols', 0, 'split', [ ' ' ], 'grep', [ '^(imap|pop3)$' ], 'join', [ ' ' ]]);
}
else {
$output .=  '
protocols = lmtp imap pop3';
}

$output .=  '

# A comma separated list of IPs or hosts where to listen in for connections.
# "*" listens in all IPv4 interfaces, "::" listens in all IPv6 interfaces.
# If you want to specify non-default ports or anything more complex,
# edit conf.d/master.conf.
#listen = *, ::

# Should all IMAP and POP3 processes be killed when Dovecot master process
# shuts down. Setting this to "no" means that Dovecot can be upgraded without
# forcing existing client connections to close (although that could also be
# a problem if the upgrade is eg. because of a security fix). This however
# means that after master process has died, the client processes can\'t write
# to log files anymore.';
#line 68 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['shutdown_clients', 0, 'defined', 0])) {
$output .=  '
shutdown_clients = ';
#line 65 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('shutdown_clients');
}
else {
$output .=  '
#shutdown_clients = yes';
}

$output .=  '

';
#line 72 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['verbose_proctitle', 0, 'defined', 0])) {
$output .=  '
verbose_proctitle = ';
#line 71 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('verbose_proctitle');
$output .=  '
';
}

$output .=  '

';
#line 77 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('fts_support')) {
$output .=  '
# FTS support
!include_try /etc/dovecot/fts.conf
';
}

$output .=  '

# SSL DH parameters
# Generate new params with `openssl dhparam -out /etc/dovecot/dh.pem 4096`
# Or migrate from old ssl-parameters.dat file with the command dovecot
# gives on startup when ssl_dh is unset.';
#line 85 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('ssl_dh_file')) {
$output .=  '
ssl_dh = <';
#line 84 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('ssl_dh_file');
}

$output .=  '

# SSL & SNI hosts
!include_try /etc/dovecot/ssl.conf
!include_try /etc/dovecot/sni.conf

##
## Login processes
##

# Name of this instance. In multi-instance setup doveadm and other commands
# can use -i <instance_name> to select which instance is used (an alternative
# to -c <config_path>). The instance name is also added to Dovecot processes
# in ps output.
#instance_name = dovecot

# Greeting message for clients.';
#line 106 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_greeting', 0, 'defined', 0])) {
$output .=  '
login_greeting = ';
#line 103 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_greeting');
}
else {
$output .=  '
#login_greeting = Dovecot ready.';
}

$output .=  '

# Space separated list of trusted network ranges. Connections from these
# IPs are allowed to override their IP addresses and ports (for logging and
# for authentication checks). disable_plaintext_auth is also ignored for
# these networks. Typically you\'d specify your IMAP proxy servers here.';
#line 116 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_trusted_networks', 0, 'defined', 0])) {
$output .=  '
login_trusted_networks = ';
#line 113 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_trusted_networks');
}
else {
$output .=  '
#login_trusted_networks =';
}

$output .=  "\n\n# Space separated list of login access check sockets (e.g. tcpwrap)\n#login_access_sockets =\n\n# With proxy_maybe=yes if proxy destination matches any of these IPs, don't do\n# proxying. This isn't necessary normally, but may be useful if the destination\n# IP is e.g. a load balancer's IP.\n#auth_proxy_self =\n\n##\n## Mailbox locations and namespaces\n##\n\n# Location for users' mailboxes. The default is empty, which means that Dovecot\n# tries to find the mailboxes automatically. This won't work if the user\n# doesn't yet have any mail, so you should explicitly tell Dovecot the full\n# location.\n#\n# If you're using mbox, giving a path to the INBOX file (eg. /var/mail/%u)\n# isn't enough. You'll also need to tell Dovecot where the other mailboxes are\n# kept. This is called the \"root mail directory\", and it must be the first\n# path given in the mail_location setting.\n#\n# There are a few special variables you can use, eg.:\n#\n#   %u - username\n#   %n - user part in user\@domain, same as %u if there's no domain\n#   %d - domain part in user\@domain, empty if there's no domain\n#   %h - home directory\n#\n# See doc/wiki/Variables.txt for full list. Some examples:\n#\n#   mail_location = maildir:~/Maildir\n#   mail_location = mbox:~/mail:INBOX=/var/mail/%u\n#   mail_location = mbox:/var/mail/%d/%1n/%n:INDEX=/var/indexes/%d/%1n/%n\n#\n# <doc/wiki/MailLocation.txt>\n#\n";
#line 160 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_location', 0, 'defined', 0])) {
$output .=  '
mail_location = ';
#line 157 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_location');
}
else {
$output .=  '
#mail_location =';
}

$output .=  '

namespace inbox {
   type = private

   # Hierarchy separator to use. You should use the same separator for all
   # namespaces or some clients get confused. \'/\' is usually a good one.
   # The default however depends on the underlying mail storage format.';
#line 172 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['namespace_private', 0, 'separator', 0, 'defined', 0])) {
$output .=  '
   separator = ';
#line 169 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['namespace_private', 0, 'separator', 0]);
}
else {
$output .=  '
   #separator =';
}

$output .=  '

   # Prefix required to access this namespace. This needs to be different for
   # all namespaces. For example "Public/".';
#line 180 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['namespace_private', 0, 'prefix', 0, 'defined', 0])) {
$output .=  '
   prefix = ';
#line 177 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['namespace_private', 0, 'prefix', 0]);
}
else {
$output .=  '
   #prefix = INBOX.';
}

$output .=  '

   # Physical location of the mailbox. This is in same format as
   # mail_location, which is also the default for it.';
#line 188 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['namespace_private', 0, 'location', 0, 'defined', 0])) {
$output .=  '
   location = ';
#line 185 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['namespace_private', 0, 'location', 0]);
}
else {
$output .=  '
   #location =';
}

$output .=  '

   # There can be only one INBOX, and this setting defines which namespace
   # has it.';
#line 196 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['namespace_private', 0, 'inbox', 0, 'defined', 0])) {
$output .=  '
   inbox = ';
#line 193 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['namespace_private', 0, 'inbox', 0]);
}
else {
$output .=  '
   #inbox = yes';
}

$output .=  '

   # If namespace is hidden, it\'s not advertised to clients via NAMESPACE
   # extension. You\'ll most likely also want to set list=no. This is mostly
   # useful when converting from another server with different namespaces which
   # you want to deprecate but still keep working. For example you can create
   # hidden namespaces with prefixes "~/mail/", "~%u/mail/" and "mail/".';
#line 207 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['namespace_private', 0, 'hidden', 0, 'defined', 0])) {
$output .=  '
   hidden = ';
#line 204 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['namespace_private', 0, 'hidden', 0]);
}
else {
$output .=  '
   #hidden = yes';
}

$output .=  '

   # Show the mailboxes under this namespace with LIST command. This makes the
   # namespace visible for clients that don\'t support NAMESPACE extension.
   # "children" value lists child mailboxes, but hides the namespace prefix.';
#line 216 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['namespace_private', 0, 'defined', [ 'list' ]])) {
$output .=  '
   list = ';
#line 213 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['namespace_private', 0, 'item', [ 'list' ]]);
}
else {
$output .=  '
   #list = yes';
}

$output .=  '

   # Namespace handles its own subscriptions. If set to "no", the parent
   # namespace handles them (empty prefix should always have this as "yes")
   #subscriptions = yes';
#line 225 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['namespace_private', 0, 'subscriptions', 0, 'defined', 0])) {
$output .=  '
   subscriptions = ';
#line 222 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['namespace_private', 0, 'subscriptions', 0]);
}
else {
$output .=  '
   #subscriptions = yes';
}

$output .=  "\n\n  mailbox Drafts {\n    special_use = \\Drafts\n    auto = subscribe\n  }\n\n  mailbox spam {\n    special_use = \\Junk\n    auto = subscribe\n  }\n\n  mailbox Trash {\n    special_use = \\Trash\n    auto = subscribe\n  }\n\n  mailbox Sent {\n    special_use = \\Sent\n    auto = subscribe\n  }\n\n  mailbox \"Sent Messages\" {\n    special_use = \\Sent\n    auto = no\n  }\n\n  mailbox Archive {\n    special_use = \\Archive\n    auto = create\n  }\n\n  mailbox \"Archives\" {\n    special_use = \\Archive\n    auto = no\n  }\n}\n\n# Example shared namespace configuration\n#namespace {\n  #type = shared\n  #separator = /\n\n  # Mailboxes are visible under \"shared/user\@domain/\"\n  # %%n, %%d and %%u are expanded to the destination user.\n  #prefix = shared/%%u/\n\n  # Mail location for other users' mailboxes. Note that %variables and ~/\n  # expands to the logged in user's data. %%n, %%d, %%u and %%h expand to the\n  # destination user's data.\n  #location = maildir:%%h/Maildir:INDEX=~/Maildir/shared/%%u\n\n  # Use the default namespace for saving subscriptions.\n  #subscriptions = no\n\n  # List the shared/ namespace only if there are visible shared mailboxes.\n  #list = children\n#}\n# Should shared INBOX be visible as \"shared/user\" or \"shared/user/INBOX\"?\n#mail_shared_explicit_inbox = no\n\n# System user and group used to access mails. If you use multiple, userdb\n# can override these by returning uid or gid fields. You can use either numbers\n# or names. <doc/wiki/UserIds.txt>";
#line 293 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_uid', 0, 'defined', 0])) {
$output .=  '
mail_uid = ';
#line 290 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_uid');
}
else {
$output .=  '
#mail_uid =';
}

#line 298 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_gid', 0, 'defined', 0])) {
$output .=  '
mail_gid = ';
#line 295 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_gid');
}
else {
$output .=  '
#mail_gid =';
}

$output .=  '

# Group to enable temporarily for privileged operations. Currently this is
# used only with INBOX when either its initial creation or dotlocking fails.
# Typically this is set to "mail" to give access to /var/mail.';
#line 307 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_privileged_group', 0, 'defined', 0])) {
$output .=  '
mail_privileged_group = ';
#line 304 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_privileged_group');
}
else {
$output .=  '
#mail_privileged_group =';
}

$output .=  '

# Grant access to these supplementary groups for mail processes. Typically
# these are used to set up access to shared mailboxes. Note that it may be
# dangerous to set these if users can create symlinks (e.g. if "mail" group is
# set here, ln -s /var/mail ~/mail/var could allow a user to delete others\'
# mailboxes, or ln -s /secret/shared/box ~/mail/mybox would allow reading it).';
#line 318 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_access_groups', 0, 'defined', 0])) {
$output .=  '
mail_access_groups = ';
#line 315 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_access_groups');
}
else {
$output .=  '
#mail_access_groups =';
}

$output .=  '

# Allow full filesystem access to clients. There\'s no access checks other than
# what the operating system does for the active UID/GID. It works with both
# maildir and mboxes, allowing you to prefix mailboxes names with eg. /path/
# or ~user/.';
#line 328 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_full_filesystem_access', 0, 'defined', 0])) {
$output .=  '
mail_full_filesystem_access = ';
#line 325 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_full_filesystem_access');
}
else {
$output .=  '
#mail_full_filesystem_access = no';
}

$output .=  "\n\n# Dictionary for key=value mailbox attributes. This is used for example by\n# URLAUTH and METADATA extensions.\n#mail_attribute_dict =\n\n# A comment or note that is associated with the server. This value is\n# accessible for authenticated users through the IMAP METADATA server\n# entry \"/shared/comment\".\n#mail_server_comment = \"\"\n\n# Indicates a method for contacting the server administrator. According to\n# RFC 5464, this value MUST be a URI (e.g., a mailto: or tel: URL), but that\n# is currently not enforced. Use for example mailto:admin\@example.com. This\n# value is accessible for authenticated users through the IMAP METADATA server\n# entry \"/shared/admin\".\n#mail_server_admin =\n\n##\n## Mail processes\n##\n\n# Don't use mmap() at all. This is required if you store indexes to shared\n# filesystems (NFS or clustered filesystem).";
#line 356 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mmap_disable', 0, 'defined', 0])) {
$output .=  '
mmap_disable = ';
#line 353 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mmap_disable');
}
else {
$output .=  '
#mmap_disable = no';
}

$output .=  '

# Rely on O_EXCL to work when creating dotlock files. NFS supports O_EXCL
# since version 3, so this should be safe to use nowadays by default.';
#line 364 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['dotlock_use_excl', 0, 'defined', 0])) {
$output .=  '
dotlock_use_excl = ';
#line 361 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('dotlock_use_excl');
}
else {
$output .=  '
#dotlock_use_excl = yes';
}

$output .=  '

# When to use fsync() or fdatasync() calls:
#   optimized (default): Whenever necessary to avoid losing important data
#   always: Useful with e.g. NFS when write()s are delayed
#   never: Never use it (best performance, but crashes can lose data)';
#line 374 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['fsync_disable', 0, 'defined', 0])) {
$output .=  '
mail_fsync = ';
#line 371 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('fsync_disable') eq 'yes' ? 'never' : 'optimized';
}
else {
$output .=  '
#mail_fsync = optimized';
}

$output .=  '

# Mail storage exists in NFS. Set this to yes to make Dovecot flush NFS caches
# whenever needed. If you\'re using only a single mail server this isn\'t needed.';
#line 382 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_nfs_storage', 0, 'defined', 0])) {
$output .=  '
mail_nfs_storage = ';
#line 379 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_nfs_storage');
}
else {
$output .=  '
#mail_nfs_storage = no';
}

$output .=  '

# Mail index files also exist in NFS. Setting this to yes requires
# mmap_disable=yes and fsync_disable=no.';
#line 390 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_nfs_index', 0, 'defined', 0])) {
$output .=  '
mail_nfs_index = ';
#line 387 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_nfs_index');
}
else {
$output .=  '
#mail_nfs_index = no';
}

$output .=  '

# Locking method for index files. Alternatives are fcntl, flock and dotlock.
# Dotlocking uses some tricks which may create more disk I/O than other locking
# methods. NFS users: flock doesn\'t work, remember to change mmap_disable.';
#line 399 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['lock_method', 0, 'defined', 0])) {
$output .=  '
lock_method = ';
#line 396 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('lock_method');
}
else {
$output .=  '
#lock_method = fcntl';
}

$output .=  '

# Show more verbose process titles (in ps). Currently shows user name and
# IP address. Useful for seeing who are actually using the IMAP processes
# (eg. shared mailboxes or if same uid is used for multiple accounts).';
#line 408 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['verbose_proctitle', 0, 'defined', 0])) {
$output .=  '
verbose_proctitle = ';
#line 405 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('verbose_proctitle');
}
else {
$output .=  '
#verbose_proctitle = no';
}

$output .=  '

# Directory where mails can be temporarily stored. Usually it\'s used only for
# mails larger than >= 128 kB. It\'s used by various parts of Dovecot, for
# example LDA/LMTP while delivering large mails or zlib plugin for keeping
# uncompressed mails.
#mail_temp_dir = /tmp

# Valid UID range for users, defaults to 500 and above. This is mostly
# to make sure that users can\'t log in as daemons or other system users.
# Note that denying root logins is hardcoded to dovecot binary and can\'t
# be done even if first_valid_uid is set to 0.';
#line 424 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['first_valid_uid', 0, 'defined', 0])) {
$output .=  '
first_valid_uid = ';
#line 421 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('first_valid_uid');
}
else {
$output .=  '
first_valid_uid = 201';
}

#line 429 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['last_valid_uid', 0, 'defined', 0])) {
$output .=  '
last_valid_uid = ';
#line 426 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('last_valid_uid');
}
else {
$output .=  '
#last_valid_uid = 0';
}

$output .=  '

# Valid GID range for users, defaults to non-root/wheel. Users having
# non-valid GID as primary group ID aren\'t allowed to log in. If user
# belongs to supplementary groups with non-valid GIDs, those groups are
# not set.';
#line 439 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['first_valid_gid', 0, 'defined', 0])) {
$output .=  '
first_valid_gid = ';
#line 436 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('first_valid_gid');
}
else {
$output .=  '
#first_valid_gid = 1';
}

#line 444 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['last_valid_gid', 0, 'defined', 0])) {
$output .=  '
last_valid_gid = ';
#line 441 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('last_valid_gid');
}
else {
$output .=  '
#last_valid_gid = 0';
}

$output .=  '

# Maximum allowed length for mail keyword name. It\'s only forced when trying
# to create new keywords.';
#line 452 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_max_keyword_length', 0, 'defined', 0])) {
$output .=  '
mail_max_keyword_length = ';
#line 449 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_max_keyword_length');
}
else {
$output .=  '
#mail_max_keyword_length = 50';
}

$output .=  '

# \':\' separated list of directories under which chrooting is allowed for mail
# processes (ie. /var/mail will allow chrooting to /var/mail/foo/bar too).
# This setting doesn\'t affect login_chroot, mail_chroot or auth chroot
# settings. If this setting is empty, "/./" in home dirs are ignored.
# WARNING: Never add directories here which local users can modify, that
# may lead to root exploit. Usually this should be done only if you don\'t
# allow shell access for users. <doc/wiki/Chrooting.txt>';
#line 465 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['valid_chroot_dirs', 0, 'defined', 0])) {
$output .=  '
valid_chroot_dirs = ';
#line 462 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('valid_chroot_dirs');
}
else {
$output .=  '
#valid_chroot_dirs =';
}

$output .=  '

# Default chroot directory for mail processes. This can be overridden for
# specific users in user database by giving /./ in user\'s home directory
# (eg. /home/./user chroots into /home). Note that usually there is no real
# need to do chrooting, Dovecot doesn\'t allow users to access files outside
# their mail directory anyway. If your home directories are prefixed with
# the chroot directory, append "/." to mail_chroot. <doc/wiki/Chrooting.txt>';
#line 477 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_chroot', 0, 'defined', 0])) {
$output .=  '
mail_chroot = ';
#line 474 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_chroot');
}
else {
$output .=  '
#mail_chroot =';
}

$output .=  '

# UNIX socket path to master authentication server to find users.
# This is used by imap (for shared users) and lda.
#auth_socket_path = /var/run/dovecot/auth-userdb

# Directory where to look up mail plugins.
#mail_plugin_dir = /usr/lib/dovecot

# Space separated list of plugins to load for all services. Plugins specific to
# IMAP, LDA, etc. are added to this list in their own .conf files.
# Quota support must be enabled globally for the quota-status
# service to work
mail_plugins = quota quota_clone zlib ';
#line 490 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('fts_support')) {
$output .=  'fts fts_solr';
}

$output .=  '

##
## Mailbox handling optimizations
##

# Mailbox list indexes can be used to optimize IMAP STATUS commands. They are
# also required for IMAP NOTIFY extension to be enabled.
mailbox_list_index = yes

# Trust mailbox list index to be up-to-date. This reduces disk I/O at the cost
# of potentially returning out-of-date results after e.g. server crashes.
# The results will be automatically fixed once the folders are opened.
#mailbox_list_index_very_dirty_syncs = yes

# Should INBOX be kept up-to-date in the mailbox list index? By default it\'s
# not, because most of the mailbox accesses will open INBOX anyway.
#mailbox_list_index_include_inbox = no

# The minimum number of mails in a mailbox before updates are done to cache
# file. This allows optimizing Dovecot\'s behavior to do less disk writes at
# the cost of more disk reads.';
#line 516 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_cache_min_mail_count', 0, 'defined', 0])) {
$output .=  '
mail_cache_min_mail_count = ';
#line 513 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_cache_min_mail_count');
}
else {
$output .=  '
#mail_cache_min_mail_count = 0';
}

$output .=  '

# When IDLE command is running, mailbox is checked once in a while to see if
# there are any new mails or other changes. This setting defines the minimum
# time to wait between those checks. Dovecot can also use inotify and
# kqueue to find out immediately when changes occur.';
#line 526 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mailbox_idle_check_interval', 0, 'defined', 0])) {
$output .=  '
mailbox_idle_check_interval = ';
#line 523 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mailbox_idle_check_interval');
$output .=  ' secs';
}
else {
$output .=  '
#mailbox_idle_check_interval = 30 secs';
}

$output .=  '

# Save mails with CR+LF instead of plain LF. This makes sending those mails
# take less CPU, especially with sendfile() syscall with Linux and FreeBSD.
# But it also creates a bit more disk I/O which may just make it slower.
# Also note that if other software reads the mboxes/maildirs, they may handle
# the extra CRs wrong and cause problems.';
#line 537 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_save_crlf', 0, 'defined', 0])) {
$output .=  '
mail_save_crlf = ';
#line 534 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_save_crlf');
}
else {
$output .=  '
#mail_save_crlf = no';
}

$output .=  '

# Max number of mails to keep open and prefetch to memory. This only works with
# some mailbox formats and/or operating systems.
mail_prefetch_count = 20

# How often to scan for stale temporary files and delete them (0 = never).
# These should exist only after Dovecot dies in the middle of saving mails.
#mail_temp_scan_interval = 1w

# How many slow mail accesses sorting can perform before it returns failure.
# With IMAP the reply is: NO [LIMIT] Requested sort would have taken too long.
# The untagged SORT reply is still returned, but it\'s likely not correct.
#mail_sort_max_read_count = 0

protocol !indexer-worker {
  # If folder vsize calculation requires opening more than this many mails from
  # disk (i.e. mail sizes aren\'t in cache already), return failure and finish
  # the calculation via indexer process. Disabled by default. This setting must
  # be 0 for indexer-worker processes.
  #mail_vsize_bg_after_count = 0
}

##
## Maildir-specific settings
##

# By default LIST command returns all entries in maildir beginning with a dot.
# Enabling this option makes Dovecot return only entries which are directories.
# This is done by stat()ing each entry, so it causes more disk I/O.
# (For systems setting struct dirent->d_type, this check is free and it\'s
# done always regardless of this setting)';
#line 573 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['maildir_stat_dirs', 0, 'defined', 0])) {
$output .=  '
maildir_stat_dirs = ';
#line 570 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('maildir_stat_dirs');
}
else {
$output .=  '
#maildir_stat_dirs = no';
}

$output .=  '

# When copying a message, do it with hard links whenever possible. This makes
# the performance much better, and it\'s unlikely to have any side effects.';
#line 581 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['maildir_copy_with_hardlinks', 0, 'defined', 0])) {
$output .=  '
maildir_copy_with_hardlinks = ';
#line 578 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('maildir_copy_with_hardlinks');
}
else {
$output .=  '
#maildir_copy_with_hardlinks = yes';
}

$output .=  '

# Assume Dovecot is the only MUA accessing Maildir: Scan cur/ directory only
# when its mtime changes unexpectedly or when we can\'t find the mail otherwise.';
#line 589 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['maildir_very_dirty_syncs', 0, 'defined', 0])) {
$output .=  '
maildir_very_dirty_syncs = ';
#line 586 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('maildir_very_dirty_syncs');
}
else {
$output .=  '
#maildir_very_dirty_syncs = no';
}

$output .=  '

# If enabled, Dovecot doesn\'t use the S=<size> in the Maildir filenames for
# getting the mail\'s physical size, except when recalculating Maildir++ quota.
# This can be useful in systems where a lot of the Maildir filenames have a
# broken size. The performance hit for enabling this is very small.';
#line 599 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['maildir_broken_filename_sizes', 0, 'defined', 0])) {
$output .=  '
maildir_broken_filename_sizes = ';
#line 596 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('maildir_broken_filename_sizes');
}
else {
$output .=  '
#maildir_broken_filename_sizes = no';
}

$output .=  "\n\n# Always move mails from new/ directory to cur/, even when the \\Recent flags\n# aren't being reset.\n#maildir_empty_new = no\n\n##\n## mdbox-specific settings\n##\n\n# Maximum dbox file size until it's rotated.";
#line 614 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mdbox_rotate_size', 0, 'defined', 0])) {
$output .=  '
mdbox_rotate_size = ';
#line 611 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mdbox_rotate_size');
}
else {
$output .=  '
#mdbox_rotate_size = 10M';
}

$output .=  '

# Maximum dbox file age until it\'s rotated. Typically in days. Day begins
# from midnight, so 1d = today, 2d = yesterday, etc. 0 = check disabled.';
#line 628 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mdbox_rotate_interval', 0, 'defined', 0])) {
$output .=  '
    ';
#line 625 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mdbox_rotate_interval', 0, 'match', [ '[wd]' ]])) {
$output .=  '
# In this case they have defined a unit
mdbox_rotate_interval = ';
#line 621 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mdbox_rotate_interval');
$output .=  '
    ';
}
elsif ($stash->get('mdbox_rotate_interval')) {
$output .=  '
# If they have not defined a unit we assume days
mdbox_rotate_interval = ';
#line 624 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mdbox_rotate_interval');
$output .=  'd
    ';
}

}
else {
$output .=  '
#mdbox_rotate_interval = 0';
}

$output .=  '

# When creating new mdbox files, immediately preallocate their size to
# mdbox_rotate_size. This setting currently works only in Linux with some
# filesystems (ext4, xfs).
#mdbox_preallocate_space = no

##
## IMAP specific settings
##

protocol imap {

  # If nothing happens for this long while client is IDLEing, move the connection
  # to imap-hibernate process and close the old imap process. This saves memory,
  # because connections use very little memory in imap-hibernate process. The
  # downside is that recreating the imap process back uses some resources.
';
#line 647 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('imap_hibernate_timeout')) {
$output .=  '
  imap_hibernate_timeout = ';
#line 646 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('imap_hibernate_timeout');
$output .=  's
';
}

$output .=  '

  # Maximum IMAP command line length in bytes. Some clients generate very long
  # command lines with huge mailboxes, so you may need to raise this if you get
  # "Too long argument" or "IMAP command line too large" errors often.';
#line 656 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_imap', 0, 'imap_max_line_length', 0, 'defined', 0])) {
$output .=  '
  imap_max_line_length = ';
#line 653 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_imap', 0, 'imap_max_line_length', 0]);
}
else {
$output .=  '
  #imap_max_line_length = 65536';
}

$output .=  '

  # Maximum number of IMAP connections allowed for a user from each IP address.
  # NOTE: The username is compared case-sensitively.';
#line 664 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_imap', 0, 'mail_max_userip_connections', 0, 'defined', 0])) {
$output .=  '
  mail_max_userip_connections = ';
#line 661 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_imap', 0, 'mail_max_userip_connections', 0]);
}
else {
$output .=  '
  #mail_max_userip_connections = 10';
}

$output .=  '

  # Space separated list of plugins to load (default is global mail_plugins).';
#line 671 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_imap', 0, 'mail_plugins', 0, 'defined', 0])) {
$output .=  '
  mail_plugins = ';
#line 668 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_imap', 0, 'mail_plugins', 0]);
}
else {
$output .=  '
  #mail_plugins = acl quota imap_quota';
}

$output .=  "\n  mail_plugins = \$mail_plugins zlib imap_zlib quota_clone virtual ";
#line 672 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('xaps_topic')) {
$output .=  'imap_xaps';
}

$output .=  ' ';
#line 672 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('fts_support')) {
$output .=  'fts fts_solr';
}

$output .=  "\n  #mail_plugin_dir = /usr/lib/dovecot/imap\n\n\n  # IMAP logout format string:\n  #  %i - total number of bytes read from client\n  #  %o - total number of bytes sent to client\n  #  %{fetch_hdr_count} - Number of mails with mail header data sent to client\n  #  %{fetch_hdr_bytes} - Number of bytes with mail header data sent to client\n  #  %{fetch_body_count} - Number of mails with mail body data sent to client\n  #  %{fetch_body_bytes} - Number of bytes with mail body data sent to client\n  #  %{deleted} - Number of mails where client added \\Deleted flag\n  #  %{expunged} - Number of mails that client expunged, which does not\n  #                include automatically expunged mails\n  #  %{autoexpunged} - Number of mails that were automatically expunged after\n  #                    client disconnected\n  #  %{trashed} - Number of mails that client copied/moved to the\n  #               special_use=\\Trash mailbox.\n  #  %{appended} - Number of mails saved during the session";
#line 698 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_imap', 0, 'imap_logout_format', 0, 'defined', 0])) {
$output .=  '
  imap_logout_format = ';
#line 692 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_imap', 0, 'imap_logout_format', 0]);
}
else {
$output .=  "\n  #imap_logout_format = in=%i out=%o deleted=%{deleted} expunged=%{expunged} \\\n  #  trashed=%{trashed} hdr_count=%{fetch_hdr_count} \\\n  #  hdr_bytes=%{fetch_hdr_bytes} body_count=%{fetch_body_count} \\\n  #  body_bytes=%{fetch_body_bytes}";
}

$output .=  '

  # Override the IMAP CAPABILITY response. If the value begins with \'+\',
  # add the given capabilities on top of the defaults (e.g. +XFOO XBAR).';
#line 706 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_imap', 0, 'imap_capability', 0, 'defined', 0])) {
$output .=  '
  imap_capability = ';
#line 703 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_imap', 0, 'imap_capability', 0]);
}
else {
$output .=  '
  #imap_capability =';
}

$output .=  '

  # How many seconds to wait between "OK Still here" notifications when
  # client is IDLEing.';
#line 714 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_imap', 0, 'imap_idle_notify_interval', 0, 'defined', 0])) {
$output .=  '
  imap_idle_notify_interval = ';
#line 711 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_imap', 0, 'imap_idle_notify_interval', 0]);
$output .=  ' min';
}
else {
$output .=  '
  #imap_idle_notify_interval = 120';
}

$output .=  '

  # ID field names and values to send to clients. Using * as the value makes
  # Dovecot use the default value. The following fields have default values
  # currently: name, version, os, os-version, support-url, support-email.';
#line 723 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_imap', 0, 'imap_id_send', 0, 'defined', 0])) {
$output .=  '
  imap_id_send = ';
#line 720 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_imap', 0, 'imap_id_send', 0]);
}
else {
$output .=  '
  #imap_id_send =';
}

$output .=  '

  # ID fields sent by client to log. * means everything.';
#line 730 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_imap', 0, 'imap_id_log', 0, 'defined', 0])) {
$output .=  '
  imap_id_log = ';
#line 727 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_imap', 0, 'imap_id_log', 0]);
}
else {
$output .=  '
  #imap_id_log =';
}

$output .=  "\n\n  # Workarounds for various client bugs:\n  #   delay-newmail:\n  #     Send EXISTS/RECENT new mail notifications only when replying to NOOP\n  #     and CHECK commands. Some clients ignore them otherwise, for example OSX\n  #     Mail (<v2.1). Outlook Express breaks more badly though, without this it\n  #     may show user \"Message no longer in server\" errors. Note that OE6 still\n  #     breaks even with this workaround if synchronization is set to\n  #     \"Headers Only\".\n  #   tb-extra-mailbox-sep:\n  #     Thunderbird gets somehow confused with LAYOUT=fs (mbox and dbox) and\n  #     adds extra '/' suffixes to mailbox names. This option causes Dovecot to\n  #     ignore the extra '/' instead of treating it as invalid mailbox name.\n  #   tb-lsub-flags:\n  #     Show \\Noselect flags for LSUB replies with LAYOUT=fs (e.g. mbox).\n  #     This makes Thunderbird realize they aren't selectable and show them\n  #     greyed out, instead of only later giving \"not selectable\" popup error.\n  #\n  # The list is space-separated.";
#line 754 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_imap', 0, 'imap_client_workarounds', 0, 'defined', 0])) {
$output .=  '
  imap_client_workarounds = ';
#line 751 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_imap', 0, 'imap_client_workarounds', 0]);
}
else {
$output .=  '
  #imap_client_workarounds =';
}

$output .=  '

  # Host allowed in URLAUTH URLs sent by client. "*" allows all.
  #imap_urlauth_host =

  # Enable IMAP LITERAL- extension (replaces LITERAL+)
  #imap_literal_minus = no

  # What happens when FETCH fails due to some internal error:
  #   disconnect-immediately:
  #     The FETCH is aborted immediately and the IMAP client is disconnected.
  #   disconnect-after:
  #     The FETCH runs for all the requested mails returning as much data as
  #     possible. The client is finally disconnected without a tagged reply.
  #   no-after:
  #     Same as disconnect-after, but tagged NO reply is sent instead of
  #     disconnecting the client. If the client attempts to FETCH the same failed
  #     mail more than once, the client is disconnected. This is to avoid clients
  #     from going into infinite loops trying to FETCH a broken mail.
  #imap_fetch_failure = disconnect-immediately

  namespace spam {
      prefix = spam';
#line 781 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['namespace_private', 0, 'separator', 0, 'defined', 0])) {
$output .=  '
     separator = ';
#line 778 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['namespace_private', 0, 'separator', 0]);
}
else {
$output .=  '
     #separator =';
}

$output .=  '
    location = virtual:/usr/local/cpanel/etc/dovecot/virtual/spam:INDEX=~/mail/virtual/%u/spam
    list = no
    hidden = yes
  }

  namespace sent {
      prefix = sent';
#line 793 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['namespace_private', 0, 'separator', 0, 'defined', 0])) {
$output .=  '
     separator = ';
#line 790 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['namespace_private', 0, 'separator', 0]);
}
else {
$output .=  '
     #separator =';
}

$output .=  '
    location = virtual:/usr/local/cpanel/etc/dovecot/virtual/sent:INDEX=~/mail/virtual/%u/sent
    list = no
    hidden = yes
  }

';
#line 805 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('expire_trash')) {
$output .=  '
  namespace inbox {
      mailbox Trash {
        autoexpunge = ';
#line 802 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('expire_trash_ttl');
$output .=  'd
      }
  }
';
}

$output .=  '

';
#line 813 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('expire_spam')) {
$output .=  '
  namespace inbox {
      mailbox spam {
        autoexpunge = ';
#line 810 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('expire_spam_ttl');
$output .=  'd
      }
  }
';
}

$output .=  '

}


##
## POP3 specific settings
##

protocol pop3 {

  # Don\'t try to set mails non-recent or seen with POP3 sessions. This is
  # mostly intended to reduce disk I/O. With maildir it doesn\'t move files
  # from new/ to cur/, with mbox it doesn\'t write Status-header.';
#line 831 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_pop3', 0, 'pop3_no_flag_updates', 0, 'defined', 0])) {
$output .=  '
  pop3_no_flag_updates = ';
#line 828 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_pop3', 0, 'pop3_no_flag_updates', 0]);
}
else {
$output .=  '
  #pop3_no_flag_updates = no';
}

$output .=  "\n\n  # Support LAST command which exists in old POP3 specs, but has been removed\n  # from new ones. Some clients still wish to use this though. Enabling this\n  # makes RSET command clear all \\Seen flags from messages.";
#line 840 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_pop3', 0, 'pop3_enable_last', 0, 'defined', 0])) {
$output .=  '
  pop3_enable_last = ';
#line 837 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_pop3', 0, 'pop3_enable_last', 0]);
}
else {
$output .=  '
  #pop3_enable_last = no';
}

$output .=  '

  # If mail has X-UIDL header, use it as the mail\'s UIDL.';
#line 847 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_pop3', 0, 'pop3_reuse_xuidl', 0, 'defined', 0])) {
$output .=  '
  pop3_reuse_xuidl = ';
#line 844 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_pop3', 0, 'pop3_reuse_xuidl', 0]);
}
else {
$output .=  '
  #pop3_reuse_xuidl = no';
}

$output .=  '

  # Allow only one POP3 session to run simultaneously for the same user.';
#line 854 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_pop3', 0, 'pop3_lock_session', 0, 'defined', 0])) {
$output .=  '
  pop3_lock_session = ';
#line 851 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_pop3', 0, 'pop3_lock_session', 0]);
}
else {
$output .=  '
  #pop3_lock_session =';
}

$output .=  '

  # POP3 UIDL (unique mail identifier) format to use. You can use following
  # variables, along with the variable modifiers described in
  # doc/wiki/Variables.txt (e.g. %Uf for the filename in uppercase)
  #
  #  %v - Mailbox\'s IMAP UIDVALIDITY
  #  %u - Mail\'s IMAP UID
  #  %m - MD5 sum of the mailbox headers in hex (mbox only)
  #  %f - filename (maildir only)
  #
  # If you want UIDL compatibility with other POP3 servers, use:
  #  UW\'s ipop3d         : %08Xv%08Xu
  #  Courier             : %f or %v-%u (both might be used simultaneosly)
  #  Cyrus (<= 2.1.3)    : %u
  #  Cyrus (>= 2.1.4)    : %v.%u
  #  Dovecot v0.99.x     : %v.%u
  #  tpop3d              : %Mf
  #
  # Note that Outlook 2003 seems to have problems with %v.%u format which was
  # Dovecot\'s default, so if you\'re building a new server it would be a good
  # idea to change this. %08Xu%08Xv should be pretty fail-safe.
  #';
#line 881 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_pop3', 0, 'pop3_uidl_format', 0, 'defined', 0])) {
$output .=  '
  pop3_uidl_format = ';
#line 878 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_pop3', 0, 'pop3_uidl_format', 0]);
}
else {
$output .=  '
  #pop3_uidl_format = UID%u-%v';
}

$output .=  "\n\n  # Permanently save UIDLs sent to POP3 clients, so pop3_uidl_format changes\n  # won't change those UIDLs. Currently this works only with Maildir.\n  #pop3_save_uidl = no\n\n  # What to do about duplicate UIDLs if they exist?\n  #   allow: Show duplicates to clients.\n  #   rename: Append a temporary -2, -3, etc. counter after the UIDL.\n  #pop3_uidl_duplicates = allow\n\n  # This option changes POP3 behavior so that it's not possible to actually\n  # delete mails via POP3, only hide them from future POP3 sessions. The mails\n  # will still be counted towards user's quota until actually deleted via IMAP.\n  # Use e.g. \"\$POP3Deleted\" as the value (it will be visible as IMAP keyword).\n  # Make sure you can legally archive mails before enabling this setting.\n  #pop3_deleted_flag =\n\n  # POP3 requires message sizes to be listed as if they had CR+LF linefeeds.\n  # Many POP3 servers violate this by returning the sizes with LF linefeeds,\n  # because it's faster to get. When this setting is enabled, Dovecot still\n  # tries to do the right thing first, but if that requires opening the\n  # message, it fallbacks to the easier (but incorrect) size.\n  #pop3_fast_size_lookups = no\n\n  # POP3 logout format string:\n  #  %i - total number of bytes read from client\n  #  %o - total number of bytes sent to client\n  #  %t - number of TOP commands\n  #  %p - number of bytes sent to client as a result of TOP command\n  #  %r - number of RETR commands\n  #  %b - number of bytes sent to client as a result of RETR command\n  #  %d - number of deleted messages\n  #  %{deleted_bytes} - number of bytes in deleted messages\n  #  %m - number of messages (before deletion)\n  #  %s - mailbox size in bytes (before deletion)\n  #  %u - old/new UIDL hash. may help finding out if UIDLs changed unexpectedly\n  pop3_logout_format = top=%t/%p, retr=%r/%b, del=%d/%m, size=%s, bytes=%i/%o\n\n  # Maximum number of POP3 connections allowed for a user from each IP address.\n  # NOTE: The username is compared case-sensitively.";
#line 926 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_pop3', 0, 'mail_max_userip_connections', 0, 'defined', 0])) {
$output .=  '
  mail_max_userip_connections = ';
#line 923 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_pop3', 0, 'mail_max_userip_connections', 0]);
}
else {
$output .=  '
  #mail_max_userip_connections = 3';
}

$output .=  '

  # Space separated list of plugins to load (default is global mail_plugins).';
#line 933 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_pop3', 0, 'mail_plugins', 0, 'defined', 0])) {
$output .=  '
  mail_plugins = ';
#line 930 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_pop3', 0, 'mail_plugins', 0]);
}
else {
$output .=  '
  #mail_plugins =';
}

$output .=  "\n\n  mail_plugins = \$mail_plugins quota quota_clone virtual zlib\n\n  #mail_plugin_dir = /usr/lib/dovecot/pop3\n\n  # Workarounds for various client bugs:\n  #   outlook-no-nuls:\n  #     Outlook and Outlook Express hang if mails contain NUL characters.\n  #     This setting replaces them with 0x80 character.\n  #   oe-ns-eoh:\n  #     Outlook Express and Netscape Mail breaks if end of headers-line is\n  #     missing. This option simply sends it if it's missing.\n  # The list is space-separated.";
#line 951 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['protocol_pop3', 0, 'pop3_client_workarounds', 0, 'defined', 0])) {
$output .=  '
  pop3_client_workarounds = ';
#line 948 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['protocol_pop3', 0, 'pop3_client_workarounds', 0]);
}
else {
$output .=  '
  #pop3_client_workarounds =';
}

$output .=  '

  namespace spam {
      prefix = spam';
#line 959 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['namespace_private', 0, 'separator', 0, 'defined', 0])) {
$output .=  '
     separator = ';
#line 956 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['namespace_private', 0, 'separator', 0]);
}
else {
$output .=  '
     #separator =';
}

$output .=  '
    location = virtual:/usr/local/cpanel/etc/dovecot/virtual/spam:INDEX=~/mail/virtual/%u/spam
    list = no
    hidden = yes
  }

  namespace sent {
      prefix = sent';
#line 971 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['namespace_private', 0, 'separator', 0, 'defined', 0])) {
$output .=  '
     separator = ';
#line 968 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['namespace_private', 0, 'separator', 0]);
}
else {
$output .=  '
     #separator =';
}

$output .=  '
    location = virtual:/usr/local/cpanel/etc/dovecot/virtual/sent:INDEX=~/mail/virtual/%u/sent
    list = no
    hidden = yes
  }

';
#line 983 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('expire_trash')) {
$output .=  '
  namespace inbox {
      mailbox Trash {
        autoexpunge = ';
#line 980 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('expire_trash_ttl');
$output .=  'd
      }
  }
';
}

$output .=  '

';
#line 991 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('expire_spam')) {
$output .=  '
  namespace inbox {
      mailbox spam {
        autoexpunge = ';
#line 988 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('expire_spam_ttl');
$output .=  'd
      }
  }
';
}

$output .=  '

}

##
## LMTP specific settings
##

protocol lmtp {
    quota_full_tempfail = ';
#line 1000 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('incoming_reached_quota') eq 'defer' ? 'yes' : 'no';
$output .=  "\n    # Address to use when sending rejection mails.\n    # Default is postmaster\@%d. %d expands to recipient domain.\n    postmaster_address = root\n\n    mail_plugins = quota quota_clone zlib ";
#line 1006 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('xaps_topic')) {
$output .=  'xaps';
}

$output .=  '
}

lmtp_save_to_detail_mailbox = yes
lmtp_user_concurrency_limit = ';
#line 1010 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('lmtp_user_concurrency_limit');
$output .=  '

recipient_delimiter = +

# Support proxying to other LMTP/SMTP servers by performing passdb lookups.
#lmtp_proxy = no

# When recipient address includes the detail (e.g. user+detail), try to save
# the mail to the detail mailbox. See also recipient_delimiter and
# lda_mailbox_autocreate settings.
#lmtp_save_to_detail_mailbox = no

# Verify quota before replying to RCPT TO. This adds a small overhead.';
#line 1027 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['lmtp_rcpt_check_quota', 0, 'defined', 0])) {
$output .=  '
lmtp_rcpt_check_quota = ';
#line 1024 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('lmtp_rcpt_check_quota');
}
else {
$output .=  '
lmtp_rcpt_check_quota = yes';
}

$output .=  '


# Which recipient address to use for Delivered-To: header and Received:
# header. The default is "final", which is the same as the one given to
# RCPT TO command. "original" uses the address given in RCPT TO\'s ORCPT
# parameter, "none" uses nothing. Note that "none" is currently always used
# when a mail has multiple recipients.
#lmtp_hdr_delivery_address = final

##
## LDA specific settings
##

protocol lda {
  quota_full_tempfail = ';
#line 1042 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('incoming_reached_quota') eq 'defer' ? 'yes' : 'no';
$output .=  "\n  # Address to use when sending rejection mails.\n  # Default is postmaster\@%d. %d expands to recipient domain.\n  postmaster_address = root\n\n  # Hostname to use in various parts of sent mails (e.g. in Message-Id) and\n  # in LMTP replies. Default is the system's real hostname\@domain.\n  #hostname =\n\n  # Support for dynamically loadable plugins. mail_plugins is a space separated\n  # list of plugins to load.\n  mail_plugins = quota quota_clone zlib ";
#line 1054 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('xaps_topic')) {
$output .=  'xaps';
}

$output .=  '
  #mail_plugin_dir = /usr/lib/dovecot/lda

  # Binary to use for sending mails.
  #sendmail_path = /usr/lib/sendmail

  # If non-empty, send mails via this SMTP host[:port] instead of sendmail.
  #submission_host =

  # Subject: header to use for rejection mails. You can use the same variables
  # as for rejection_reason below.
  #rejection_subject = Rejected: %s

  # UNIX socket path to master authentication server to find users.
  #auth_socket_path = /var/run/dovecot/auth-master
}

# Should saving a mail to a nonexistent mailbox automatically create it?
lda_mailbox_autocreate = yes

# Should automatically created mailboxes be also automatically subscribed?
#lda_mailbox_autosubscribe = no

##
## Authentication processes
##

# Disable LOGIN command and all other plaintext authentications unless
# SSL/TLS is used (LOGINDISABLED capability). Note that if the remote IP
# matches the local IP (ie. you\'re connecting from the same computer), the
# connection is considered secure and plaintext authentication is allowed.
# See also ssl=required setting.';
#line 1090 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['disable_plaintext_auth', 0, 'defined', 0])) {
$output .=  '
disable_plaintext_auth = ';
#line 1087 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('disable_plaintext_auth');
}
else {
$output .=  '
#disable_plaintext_auth = yes';
}

$output .=  '

# Auth cache settings

# Authentication cache size (e.g. 10M). 0 means it\'s disabled. Note that
# bsdauth, PAM and vpopmail require cache_key to be set for caching to be used.';
#line 1100 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['auth_cache_size', 0, 'defined', 0])) {
$output .=  '
auth_cache_size = ';
#line 1097 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('auth_cache_size');
}
else {
$output .=  '
#auth_cache_size = 0';
}

$output .=  '

# Time to live for cached data. After TTL expires the cached record is no
# longer used, *except* if the main database lookup returns internal failure.
# We also try to handle password changes automatically: If user\'s previous
# authentication was successful, but this one wasn\'t, the cache isn\'t used.
# For now this works only with plaintext authentication.';
#line 1111 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['auth_cache_ttl', 0, 'defined', 0])) {
$output .=  '
auth_cache_ttl = ';
#line 1108 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('auth_cache_ttl');
$output .=  ' sec';
}
else {
$output .=  '
#auth_cache_ttl = 3600 sec';
}

$output .=  '

# TTL for negative hits (user not found, password mismatch).
# 0 disables caching them completely.';
#line 1119 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['auth_cache_negative_ttl', 0, 'defined', 0])) {
$output .=  '
auth_cache_negative_ttl = ';
#line 1116 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('auth_cache_negative_ttl');
$output .=  ' sec';
}
else {
$output .=  '
#auth_cache_negative_ttl = 3600 sec';
}

$output .=  "\n\n# Space separated list of realms for SASL authentication mechanisms that need\n# them. You can leave it empty if you don't want to support multiple realms.\n# Many clients simply use the first one listed here, so keep the default realm\n# first.\n#auth_realms =\n\n# Default realm/domain to use if none was specified. This is used for both\n# SASL realms and appending \@domain to username in plaintext logins.\n#auth_default_realm =\n\n# List of allowed characters in username. If the user-given username contains\n# a character not listed in here, the login automatically fails. This is just\n# an extra check to make sure user can't exploit any potential quote escaping\n# vulnerabilities with SQL/LDAP databases. If you want to allow all characters,\n# set this value to empty.\n#Allow + in usernames\nauth_username_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!#\$-=?^_{}~./\@+%\"\n\n# Maximum number of dovecot-auth worker processes. They're used to execute\n# blocking passdb and userdb queries (eg. MySQL and PAM). They're\n# automatically created and destroyed as needed.\n#auth_worker_max_count = 30\n\n# Time to delay before replying to failed authentications.\n#auth_failure_delay = 2 secs\n\n# Space separated list of wanted authentication mechanisms:\n#   plain login digest-md5 cram-md5 ntlm rpa apop anonymous gssapi otp skey\n#   gss-spnego\n# NOTE: See also disable_plaintext_auth setting.\nauth_mechanisms = plain login\n\n";
#line 1164 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('hulk_enabled')) {
$output .=  "\nauth_policy_server_url = http://127.0.0.1:579/dovecot-auth-policy\nauth_policy_server_timeout_msecs = 3000\nauth_policy_hash_mech = sha512\nauth_policy_request_attributes = auth_database=mail database=mail service=dovecot username=%{orig_user} authtoken_hash=\$0\$0\$%{hashed_password} local_host=%{real_lip} local_port=%{real_lport} remote_host=%{real_rip} remote_port=%{real_rport}\nauth_policy_reject_on_fail = no\nauth_policy_hash_truncate = 64\nauth_policy_hash_nonce = \"dummmy\"\n\n# auth_policy_hash_nonce and auth_policy_server_api_header\n!include_try /etc/dovecot/auth_policy.conf\n";
}

$output .=  '

##
## Password and user databases
##

passdb {
  driver = dict
  args = /usr/local/cpanel/etc/dovecot/cpauthd-dict.conf
  result_internalfail = continue
  result_failure = ';
#line 1174 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('allow_domainowner_mail_pass')) {
$output .=  'continue';
}
else {
$output .=  'return-fail';
}

$output .=  '
}
';
#line 1185 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('allow_domainowner_mail_pass')) {
$output .=  '
passdb {
  driver = dict
  skip = authenticated
  args = /usr/local/cpanel/etc/dovecot/cpauthd-dict-domain_owner_mail_pass.conf
  result_internalfail = continue
  result_failure = return-fail
}

';
}

$output .=  '


userdb {
   driver = prefetch
}
userdb {
  driver = dict
  args = /usr/local/cpanel/etc/dovecot/cpauthd-dict.conf
}










##
## Log destination.
##

# Log file to use for error messages. "syslog" logs to syslog,
# /dev/stderr logs to stderr.
#log_path = syslog

# Log file to use for informational messages. Defaults to log_path.
#info_log_path =
# Log file to use for debug messages. Defaults to info_log_path.
#debug_log_path =

# Syslog facility to use if you\'re logging to syslog. Usually if you don\'t
# want to use "mail", you\'ll use local0..local7. Also other standard
# facilities are supported.
#syslog_facility = mail

##
## Logging verbosity and debugging.
##

# Log unsuccessful authentication attempts and the reasons why they failed.';
#line 1232 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['auth_verbose', 0, 'defined', 0])) {
$output .=  '
auth_verbose = ';
#line 1229 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('auth_verbose');
}
else {
$output .=  '
#auth_verbose = no';
}

$output .=  '

# In case of password mismatches, log the attempted password. Valid values are
# no, plain and sha1. sha1 can be useful for detecting brute force password
# attempts vs. user simply trying the same password over and over again.
# You can also truncate the value to n chars by appending ":n" (e.g. sha1:6).
#auth_verbose_passwords = no

# Even more verbose logging for debugging purposes. Shows for example SQL
# queries.';
#line 1246 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['auth_debug', 0, 'defined', 0])) {
$output .=  '
auth_debug = ';
#line 1243 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('auth_debug');
}
else {
$output .=  '
#auth_debug = no';
}

$output .=  '

# In case of password mismatches, log the passwords and used scheme so the
# problem can be debugged. Enabling this also enables auth_debug.';
#line 1254 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['auth_debug_passwords', 0, 'defined', 0])) {
$output .=  '
auth_debug_passwords = ';
#line 1251 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('auth_debug_passwords');
}
else {
$output .=  '
#auth_debug_passwords = no';
}

$output .=  '

# Enable mail process debugging. This can help you figure out why Dovecot
# isn\'t finding your mails.';
#line 1262 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_debug', 0, 'defined', 0])) {
$output .=  '
mail_debug = ';
#line 1259 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_debug');
}
else {
$output .=  '
#mail_debug = no';
}

$output .=  '

# Show protocol level SSL errors.
#verbose_ssl = no

# mail_log plugin provides more event logging for mail processes.
plugin {
  # Events to log. Also available: flag_change append
  #mail_log_events = delete undelete expunge copy mailbox_delete mailbox_rename
  # Available fields: uid, box, msgid, from, subject, size, vsize, flags
  # size and vsize are available only for expunge and copy events.
  #mail_log_fields = uid box msgid size
}

##
## Log formatting.
##

# Prefix for each line written to log file. % codes are in strftime(3)
# format.
#log_timestamp = "%b %d %H:%M:%S "

# Space-separated list of elements we want to log. The elements which have
# a non-empty variable value are joined together to form a comma-separated
# string.';
#line 1291 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_log_format_elements', 0, 'defined', 0])) {
$output .=  '
login_log_format_elements = ';
#line 1288 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_log_format_elements');
}
else {
$output .=  '
#login_log_format_elements = user=<%u> method=%m rip=%r lip=%l %c';
}

$output .=  "\n\n# Login log format. %\$ contains login_log_format_elements string, %s contains\n# the data we want to log.";
#line 1299 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_log_format', 0, 'defined', 0])) {
$output .=  '
login_log_format = ';
#line 1296 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_log_format');
}
else {
$output .=  "\n#login_log_format = %\$: %s";
}

$output .=  '

# Log prefix for mail processes. See doc/wiki/Variables.txt for list of
# possible variables you can use.';
#line 1307 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_log_prefix', 0, 'defined', 0])) {
$output .=  '
mail_log_prefix = ';
#line 1304 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_log_prefix');
}
else {
$output .=  '
#mail_log_prefix = "%s(%u)<%{pid}><%{session}>: "';
}

$output .=  "\n\n# Format to use for logging mail deliveries:\n#  %\$ - Delivery status message (e.g. \"saved to INBOX\")\n#  %m / %{msgid} - Message-ID\n#  %s / %{subject} - Subject\n#  %f / %{from} - From address\n#  %p / %{size} - Physical size\n#  %w / %{vsize} - Virtual size\n#  %e / %{from_envelope} - MAIL FROM envelope\n#  %{to_envelope} - RCPT TO envelope\n#  %{delivery_time} - How many milliseconds it took to deliver the mail\n#  %{session_time} - How long LMTP session took, not including delivery_time\n#  %{storage_id} - Backend-specific ID for mail, e.g. Maildir filename\n#deliver_log_format = msgid=%m: %\$\n\n##\n## Services\n##\n\nservice config {\n    vsz_limit = ";
#line 1328 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('config_vsz_limit') || 512;
$output .=  ' M
}

service quota-status {
  executable = quota-status -p postfix
  unix_listener {
    path = quota-status
    mode = 0666
  }
}

service auth {
  unix_listener auth-client {
    path = auth-client
    mode = 0666
  }
';
#line 1347 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['auth_required_client_limit', 0, 'defined', 0])) {
$output .=  '
  client_limit = ';
#line 1346 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('auth_required_client_limit');
}

$output .=  '
}
';
#line 1354 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['anvil_required_client_limit', 0, 'defined', 0])) {
$output .=  '
service anvil {
  client_limit = ';
#line 1352 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('anvil_required_client_limit');
$output .=  '
}';
}

$output .=  '

service stats {
  ';
#line 1359 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('stats_required_client_limit')) {
$output .=  '
  client_limit = ';
#line 1358 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('stats_required_client_limit');
$output .=  '
  ';
}

$output .=  '
  unix_listener stats-writer {
    mode = 0666
  }
}

plugin {
';
#line 1371 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('compress_messages')) {
$output .=  '
  zlib_save = gz';
#line 1370 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['compress_messages_level', 0, 'defined', 0])) {
$output .=  '
  zlib_save_level = ';
#line 1369 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('compress_messages_level');
$output .=  '
';
}

$output .=  '
';
}

$output .=  '
  ';
#line 1372 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('xaps_topic')) {
$output .=  'xaps_topic = ';
#line 1372 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('xaps_topic');
}

$output .=  '
}

mail_access_groups = dovecot

service dict {
  unix_listener dict {
    mode = 0660
      group = dovecot
  }
}

# Disabled until we offically support Pigeonhole
#managesieve_notify_capability = mailto
#managesieve_sieve_capability = fileinto reject envelope encoded-character vacation subaddress comparator-i;ascii-numeric relational regex imap4flags copy include variables body enotify environment mailbox date ihave

service lmtp {
# Set max. process size in megabytes. Most of the memory goes to mmap()ing
# files, so it shouldn\'t harm much even if this limit is set pretty high.';
#line 1395 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_process_size', 0, 'defined', 0])) {
$output .=  '
    vsz_limit = ';
#line 1392 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_process_size');
$output .=  ' M';
}
else {
$output .=  '
    #vsz_limit = 512 M';
}

#line 1400 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('lmtp_process_min_avail')) {
$output .=  '
    process_min_avail = ';
#line 1397 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('lmtp_process_min_avail');
}
else {
$output .=  '
    #process_min_avail =';
}

$output .=  '

    #We always want this. Otherwise one connection could block another
    #connection that shares the same process.
    client_limit = 1

    process_limit = ';
#line 1406 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('lmtp_process_limit') || 500;
$output .=  '

    unix_listener lmtp {
       user = mailnull
       group = mail
       mode = 0660
    }
}

service imap-login {
# Maximum number of connections allowed per each login process. This setting
# is used only if login_process_per_connection=no. Once the limit is reached,
# the process notifies master so that it can create a new login process.';
#line 1423 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_max_connections', 0, 'defined', 0])) {
$output .=  '
  client_limit = ';
#line 1420 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_max_connections');
}
else {
$output .=  '
  #client_limit = 256';
}

$output .=  '
# Maximum number of login processes to create. The listening process count
# usually stays at login_processes_count, but when multiple users start logging
# in at the same time more extra processes are created. To prevent fork-bombing
# we check only once in a second if new processes should be created - if all
# of them are used at the time, we double their amount until the limit set by
# this setting is reached.';
#line 1434 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_max_processes_count', 0, 'defined', 0])) {
$output .=  '
    process_limit = ';
#line 1431 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_max_processes_count');
}
else {
$output .=  '
    process_limit = 128';
}

$output .=  '
# Number of login processes to keep for listening new connections.';
#line 1440 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_processes_count', 0, 'defined', 0])) {
$output .=  '
    process_min_avail = ';
#line 1437 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_processes_count');
}
else {
$output .=  '
    #process_min_avail = 2';
}

$output .=  '
# Should each login be processed in its own process (yes), or should one
# login process be allowed to process multiple connections (no)? Yes is more
# secure, espcially with SSL/TLS enabled. No is faster since there\'s no need
# to create processes all the time.';
#line 1449 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_process_per_connection', 0, 'defined', 0])) {
$output .=  '
    service_count = ';
#line 1446 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_process_per_connection') eq 'no' ? 0 : 1;
}
else {
$output .=  '
    #service_count = 0';
}

$output .=  '
# Set max. process size in megabytes. If you don\'t use
# login_process_per_connection you might need to grow this.';
#line 1456 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_process_size', 0, 'defined', 0])) {
$output .=  '
    vsz_limit = ';
#line 1453 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_process_size');
$output .=  ' M';
}
else {
$output .=  '
    #vsz_limit = 128 M';
}

$output .=  '
# Drop all privileges before exec()ing the mail process. This is mostly
# meant for debugging, otherwise you don\'t get core dumps. It could be a small
# security risk if you use single UID for multiple users, as the users could
# ptrace() each others processes then.';
#line 1465 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_drop_priv_before_exec', 0, 'defined', 0])) {
$output .=  '
    drop_priv_before_exec = ';
#line 1462 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_drop_priv_before_exec');
}
else {
$output .=  '
    #drop_priv_before_exec =';
}

$output .=  '
# chroot login process to the login_dir. Only reason not to do this is if you
# wish to run the whole Dovecot without roots. <doc/wiki/Rootless.txt>';
#line 1472 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_chroot', 0, 'defined', 0])) {
$output .=  '
chroot = ';
#line 1469 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_chroot');
}
else {
$output .=  '
#chroot = yes';
}

$output .=  '
# User to use for the login process. Create a completely new user for this,
# and don\'t use it anywhere else. The user must also belong to a group where
# only it has access, it\'s used to control access for authentication process.
# Note that this user is NOT used to access mails. <doc/wiki/UserIds.txt>';
#line 1481 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_user', 0, 'defined', 0])) {
$output .=  '
user = ';
#line 1478 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_user');
}
else {
$output .=  '
#user = dovecot';
}

$output .=  '
# IP or host address where to listen in for non-SSL connections. Defaults
# to above if not specified.';
#line 1492 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['listen', 0, 'defined', 0])) {
$output .=  '
    inet_listener imap {
      address = ';
#line 1486 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('listen');
$output .=  '
    }';
}
else {
$output .=  '
#    inet_listener imap {
#      address =
#    }';
}

$output .=  '
# IP or host address where to listen in for SSL connections. Defaults
# to above if not specified.';
#line 1503 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['ssl_listen', 0, 'defined', 0])) {
$output .=  '
    inet_listener imaps {
      address = ';
#line 1497 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('ssl_listen');
$output .=  '
    }';
}
else {
$output .=  '
#    inet_listener imaps {
#      address =
#    }';
}

$output .=  '
}

service imap {
# Maximum number of running mail processes. When this limit is reached,
# new users aren\'t allowed to log in.';
#line 1513 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['max_mail_processes', 0, 'defined', 0])) {
$output .=  '
    process_limit = ';
#line 1510 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('max_mail_processes');
}
else {
$output .=  '
    #process_limit = 512';
}

$output .=  '
# Set max. process size in megabytes. Most of the memory goes to mmap()ing
# files, so it shouldn\'t harm much even if this limit is set pretty high.';
#line 1520 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_process_size', 0, 'defined', 0])) {
$output .=  '
    vsz_limit = ';
#line 1517 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_process_size');
$output .=  ' M';
}
else {
$output .=  '
    #vsz_limit = 512 M';
}

$output .=  '
# Drop all privileges before exec()ing the mail process. This is mostly
# meant for debugging, otherwise you don\'t get core dumps. It could be a small
# security risk if you use single UID for multiple users, as the users could
# ptrace() each others processes then.';
#line 1529 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_drop_priv_before_exec', 0, 'defined', 0])) {
$output .=  '
    drop_priv_before_exec = ';
#line 1526 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_drop_priv_before_exec');
}
else {
$output .=  '
    #drop_priv_before_exec =';
}

$output .=  '
';
#line 1535 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('imap_hibernate_timeout')) {
$output .=  "\n  unix_listener imap-master {\n    user = \$default_internal_user\n  }\n  extra_groups = \$default_internal_group\n";
}

$output .=  '
}

';
#line 1545 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get('imap_hibernate_timeout')) {
$output .=  "\nservice imap-hibernate {\n  unix_listener imap-hibernate {\n    mode = 0660\n    group = \$default_internal_group\n  }\n}\n";
}

$output .=  '

service managesieve-login {
# Maximum number of connections allowed per each login process. This setting
# is used only if login_process_per_connection=no. Once the limit is reached,
# the process notifies master so that it can create a new login process.';
#line 1555 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_max_connections', 0, 'defined', 0])) {
$output .=  '
  client_limit = ';
#line 1552 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_max_connections');
}
else {
$output .=  '
  #client_limit = 256';
}

$output .=  '
# Maximum number of login processes to create. The listening process count
# usually stays at login_processes_count, but when multiple users start logging
# in at the same time more extra processes are created. To prevent fork-bombing
# we check only once in a second if new processes should be created - if all
# of them are used at the time, we double their amount until the limit set by
# this setting is reached.';
#line 1566 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_max_processes_count', 0, 'defined', 0])) {
$output .=  '
    process_limit = ';
#line 1563 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_max_processes_count');
}
else {
$output .=  '
    process_limit = 128';
}

$output .=  '
# Number of login processes to keep for listening new connections.';
#line 1572 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_processes_count', 0, 'defined', 0])) {
$output .=  '
    process_min_avail = ';
#line 1569 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_processes_count');
}
else {
$output .=  '
    #process_min_avail = 2';
}

$output .=  '
# Should each login be processed in its own process (yes), or should one
# login process be allowed to process multiple connections (no)? Yes is more
# secure, espcially with SSL/TLS enabled. No is faster since there\'s no need
# to create processes all the time.';
#line 1581 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_process_per_connection', 0, 'defined', 0])) {
$output .=  '
    service_count = ';
#line 1578 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_process_per_connection') eq 'no' ? 0 : 1;
}
else {
$output .=  '
    #service_count = 0';
}

$output .=  '
# Set max. process size in megabytes. If you don\'t use
# login_process_per_connection you might need to grow this.';
#line 1588 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_process_size', 0, 'defined', 0])) {
$output .=  '
    vsz_limit = ';
#line 1585 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_process_size');
$output .=  ' M';
}
else {
$output .=  '
    #vsz_limit = 128 M';
}

$output .=  '
# Drop all privileges before exec()ing the mail process. This is mostly
# meant for debugging, otherwise you don\'t get core dumps. It could be a small
# security risk if you use single UID for multiple users, as the users could
# ptrace() each others processes then.';
#line 1597 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_drop_priv_before_exec', 0, 'defined', 0])) {
$output .=  '
    drop_priv_before_exec = ';
#line 1594 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_drop_priv_before_exec');
}
else {
$output .=  '
    #drop_priv_before_exec =';
}

$output .=  '
# chroot login process to the login_dir. Only reason not to do this is if you
# wish to run the whole Dovecot without roots. <doc/wiki/Rootless.txt>';
#line 1604 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_chroot', 0, 'defined', 0])) {
$output .=  '
chroot = ';
#line 1601 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_chroot');
}
else {
$output .=  '
#chroot = yes';
}

$output .=  '
# User to use for the login process. Create a completely new user for this,
# and don\'t use it anywhere else. The user must also belong to a group where
# only it has access, it\'s used to control access for authentication process.
# Note that this user is NOT used to access mails. <doc/wiki/UserIds.txt>';
#line 1613 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_user', 0, 'defined', 0])) {
$output .=  '
user = ';
#line 1610 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_user');
}
else {
$output .=  '
#user = dovecot';
}

$output .=  '

}

service managesieve {
# Maximum number of running mail processes. When this limit is reached,
# new users aren\'t allowed to log in.';
#line 1624 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['max_mail_processes', 0, 'defined', 0])) {
$output .=  '
    process_limit = ';
#line 1621 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('max_mail_processes');
}
else {
$output .=  '
    #process_limit = 512';
}

$output .=  '
# Set max. process size in megabytes. Most of the memory goes to mmap()ing
# files, so it shouldn\'t harm much even if this limit is set pretty high.';
#line 1631 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_process_size', 0, 'defined', 0])) {
$output .=  '
    vsz_limit = ';
#line 1628 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_process_size');
$output .=  ' M';
}
else {
$output .=  '
    #vsz_limit = 512 M';
}

$output .=  '
# Drop all privileges before exec()ing the mail process. This is mostly
# meant for debugging, otherwise you don\'t get core dumps. It could be a small
# security risk if you use single UID for multiple users, as the users could
# ptrace() each others processes then.';
#line 1640 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_drop_priv_before_exec', 0, 'defined', 0])) {
$output .=  '
    drop_priv_before_exec = ';
#line 1637 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_drop_priv_before_exec');
}
else {
$output .=  '
    #drop_priv_before_exec =';
}

$output .=  '
}

service pop3-login {
# Maximum number of connections allowed per each login process. This setting
# is used only if login_process_per_connection=no. Once the limit is reached,
# the process notifies master so that it can create a new login process.';
#line 1651 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_max_connections', 0, 'defined', 0])) {
$output .=  '
  client_limit = ';
#line 1648 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_max_connections');
}
else {
$output .=  '
  #client_limit = 256';
}

$output .=  '
# Maximum number of login processes to create. The listening process count
# usually stays at login_processes_count, but when multiple users start logging
# in at the same time more extra processes are created. To prevent fork-bombing
# we check only once in a second if new processes should be created - if all
# of them are used at the time, we double their amount until the limit set by
# this setting is reached.';
#line 1662 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_max_processes_count', 0, 'defined', 0])) {
$output .=  '
    process_limit = ';
#line 1659 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_max_processes_count');
}
else {
$output .=  '
    process_limit = 128';
}

$output .=  '
# Number of login processes to keep for listening new connections.';
#line 1668 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_processes_count', 0, 'defined', 0])) {
$output .=  '
    process_min_avail = ';
#line 1665 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_processes_count');
}
else {
$output .=  '
    #process_min_avail = 2';
}

$output .=  '
# Should each login be processed in its own process (yes), or should one
# login process be allowed to process multiple connections (no)? Yes is more
# secure, espcially with SSL/TLS enabled. No is faster since there\'s no need
# to create processes all the time.';
#line 1677 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_process_per_connection', 0, 'defined', 0])) {
$output .=  '
    service_count = ';
#line 1674 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_process_per_connection') eq 'no' ? 0 : 1;
}
else {
$output .=  '
    #service_count = 0';
}

$output .=  '
# Set max. process size in megabytes. If you don\'t use
# login_process_per_connection you might need to grow this.';
#line 1684 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_process_size', 0, 'defined', 0])) {
$output .=  '
    vsz_limit = ';
#line 1681 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_process_size');
$output .=  ' M';
}
else {
$output .=  '
    #vsz_limit = 128 M';
}

$output .=  '
# Drop all privileges before exec()ing the mail process. This is mostly
# meant for debugging, otherwise you don\'t get core dumps. It could be a small
# security risk if you use single UID for multiple users, as the users could
# ptrace() each others processes then.';
#line 1693 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_drop_priv_before_exec', 0, 'defined', 0])) {
$output .=  '
    drop_priv_before_exec = ';
#line 1690 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_drop_priv_before_exec');
}
else {
$output .=  '
    #drop_priv_before_exec =';
}

$output .=  '
# chroot login process to the login_dir. Only reason not to do this is if you
# wish to run the whole Dovecot without roots. <doc/wiki/Rootless.txt>';
#line 1700 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_chroot', 0, 'defined', 0])) {
$output .=  '
chroot = ';
#line 1697 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_chroot');
}
else {
$output .=  '
#chroot = yes';
}

$output .=  '
# User to use for the login process. Create a completely new user for this,
# and don\'t use it anywhere else. The user must also belong to a group where
# only it has access, it\'s used to control access for authentication process.
# Note that this user is NOT used to access mails. <doc/wiki/UserIds.txt>';
#line 1709 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['login_user', 0, 'defined', 0])) {
$output .=  '
user = ';
#line 1706 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('login_user');
}
else {
$output .=  '
#user = dovecot';
}

$output .=  '
# IP or host address where to listen in for non-SSL connections. Defaults
# to above if not specified.';
#line 1720 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['listen', 0, 'defined', 0])) {
$output .=  '
    inet_listener pop3 {
      address = ';
#line 1714 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('listen');
$output .=  '
    }';
}
else {
$output .=  '
#    inet_listener pop3 {
#      address =
#    }';
}

$output .=  '
# IP or host address where to listen in for SSL connections. Defaults
# to above if not specified.';
#line 1731 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['ssl_listen', 0, 'defined', 0])) {
$output .=  '
    inet_listener pop3s {
      address = ';
#line 1725 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('ssl_listen');
$output .=  '
    }';
}
else {
$output .=  '
#    inet_listener pop3s {
#      address =
#    }';
}

$output .=  '
}

service pop3 {
# Maximum number of running mail processes. When this limit is reached,
# new users aren\'t allowed to log in.';
#line 1741 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['max_mail_processes', 0, 'defined', 0])) {
$output .=  '
    process_limit = ';
#line 1738 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('max_mail_processes');
}
else {
$output .=  '
    #process_limit = 512';
}

$output .=  '
# Set max. process size in megabytes. Most of the memory goes to mmap()ing
# files, so it shouldn\'t harm much even if this limit is set pretty high.';
#line 1748 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_process_size', 0, 'defined', 0])) {
$output .=  '
    vsz_limit = ';
#line 1745 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_process_size');
$output .=  ' M';
}
else {
$output .=  '
    #vsz_limit = 512 M';
}

$output .=  '
# Drop all privileges before exec()ing the mail process. This is mostly
# meant for debugging, otherwise you don\'t get core dumps. It could be a small
# security risk if you use single UID for multiple users, as the users could
# ptrace() each others processes then.';
#line 1757 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['mail_drop_priv_before_exec', 0, 'defined', 0])) {
$output .=  '
    drop_priv_before_exec = ';
#line 1754 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('mail_drop_priv_before_exec');
}
else {
$output .=  '
    #drop_priv_before_exec =';
}

$output .=  '

}

# Should all processes be killed when Dovecot master process shuts down.
# Setting this to "no" means that Dovecot can be upgraded without
# forcing existing client connections to close (although that could also be
# a problem if the upgrade is e.g. because of a security fix).';
#line 1769 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['shutdown_clients', 0, 'defined', 0])) {
$output .=  '
shutdown_clients = ';
#line 1766 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get('shutdown_clients');
}
else {
$output .=  '
#shutdown_clients = yes';
}

$output .=  '

# If non-zero, run mail commands via this many connections to doveadm server,
# instead of running them directly in the same process.
#doveadm_worker_count = 0
# UNIX socket or host:port used for connecting to doveadm server
#doveadm_socket_path = doveadm-server

# Space separated list of environment variables that are preserved on Dovecot
# startup and passed down to all of its child processes. You can also give
# key=value pairs to always set specific settings.
#import_environment = TZ

##
## Dictionary server settings
##

# Dictionary can be used to store key=value lists. This is used by several
# plugins. The dictionary can be accessed either directly or though a
# dictionary server. The following dict block maps dictionary names to URIs
# when the server is used. These can then be referenced using URIs in format
# "proxy::<name>".

plugin {
  # Here you can give some extra environment variables to mail processes.
  # This is mostly meant for passing parameters to plugins. %variable
  # expansion is done for all values.

  # Quota plugin. Multiple backends are supported:
  #   dirsize: Find and sum all the files found from mail directory.
  #            Extremely SLOW with Maildir. It\'ll eat your CPU and disk I/O.
  #   dict: Keep quota stored in dictionary (eg. SQL)
  #   maildir: Maildir++ quota
  #   fs: Read-only support for filesystem quota
  #
  # Quota limits are set using "quota_rule" parameters, either in here or in
  # userdb. It\'s also possible to give mailbox-specific limits, for example:
  #   quota_rule = *:storage=1048576
  #   quota_rule2 = Trash:storage=102400
  # User has now 1GB quota, but when saving to Trash mailbox the user gets
  # additional 100MB.
  #
  # Multiple quota roots are also possible, for example:
  #   quota = dict:user::proxy::quota
  #   quota2 = dict:domain:%d:proxy::quota_domain
  #   quota_rule = *:storage=102400
  #   quota2_rule = *:storage=1048576
  # Gives each user their own 100MB quota and one shared 1GB quota within
  # the domain.
  #
  # You can execute a given command when user exceeds a specified quota limit.
  # Each quota root has separate limits. Only the command for the first
  # exceeded limit is excecuted, so put the highest limit first.
  # Note that % needs to be escaped as %%, otherwise "% " expands to empty.
  #   quota_warning = storage=95%% /usr/local/bin/quota-warning.sh 95
  #   quota_warning2 = storage=80%% /usr/local/bin/quota-warning.sh 80

  quota_exceeded_message = "Mailbox is full / Blocks limit exceeded / Inode limit exceeded"

  # ACL plugin. vfile backend reads ACLs from "dovecot-acl" file from maildir
  # directory. You can also optionally give a global ACL directory path where
  # ACLs are applied to all users\' mailboxes. The global ACL directory contains
  # one file for each mailbox, eg. INBOX or sub.mailbox. cache_secs parameter
  # specifies how many seconds to wait between stat()ing dovecot-acl file
  # to see if it changed.';
#line 1838 "/var/cpanel/templates/dovecot/main.default"
if ($stash->get(['plugin', 0, 'acl', 0, 'defined', 0])) {
$output .=  '
  acl = ';
#line 1835 "/var/cpanel/templates/dovecot/main.default"
$output .=  $stash->get(['plugin', 0, 'acl', 0]);
}
else {
$output .=  '
  #acl = vfile:/etc/dovecot-acls:cache_secs=300';
}

$output .=  '

  # To let users LIST mailboxes shared by other users, Dovecot needs a
  # shared mailbox dictionary. For example:
  #acl_shared_dict = file:/var/lib/dovecot/shared-mailboxes

  # Convert plugin. If set, specifies the source storage path which is
  # converted to destination storage (mail_location) when the user logs in.
  # The existing mail directory is renamed to <dir>-converted.
  #convert_mail = mbox:%h/mail
  # Skip mailboxes which we can\'t open successfully instead of aborting.
  #convert_skip_broken_mailboxes = no
  # Skip directories beginning with \'.\'
  #convert_skip_dotdirs = no
  # If source storage has mailbox names with destination storage\'s hierarchy
  # separators, replace them with this character.
  #convert_alt_hierarchy_char = _

  # Trash plugin. When saving a message would make user go over quota, this
  # plugin automatically deletes the oldest mails from configured mailboxes
  # until the message can be saved within quota limits. The configuration file
  # is a text file where each line is in format: <priority> <mailbox name>
  # Mails are first deleted in lowest -> highest priority number order
  #trash = /etc/dovecot-trash.conf

  # Expire plugin. Mails are expunged from mailboxes after being there the
  # configurable time. The first expiration date for each mailbox is stored in
  # a dictionary so it can be quickly determined which mailboxes contain
  # expired mails. The actual expunging is done in a nightly cronjob, which
  # you must set up:
  #   dovecot --exec-mail ext /usr/libexec/dovecot/expire-tool
  #expire = Trash 7 Spam 30
  #expire_dict = db:/var/lib/dovecot/expire.db

  # Lazy expunge plugin. Currently works only with maildirs. When a user
  # expunges mails, the mails are moved to a mailbox in another namespace
  # (1st). When a mailbox is deleted, the mailbox is moved to another namespace
  # (2nd) as well. Also if the deleted mailbox had any expunged messages,
  # they\'re moved to a 3rd namespace. The mails won\'t be counted in quota,
  # and they\'re not deleted automatically (use a cronjob or something).
  #lazy_expunge = .EXPUNGED/ .DELETED/ .DELETED/.EXPUNGED/
}
';
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {

    },
});
