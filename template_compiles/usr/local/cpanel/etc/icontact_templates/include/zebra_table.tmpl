Template::Document->new({METADATA=>{'modtime'=>'1728930269','name'=>'/usr/local/cpanel/etc/icontact_templates/include/zebra_table.tmpl',},BLOCK=>sub {my$context=shift || die "template sub called without context\n";my$stash=$context->stash;my$output='';my$_tt_error;eval {BLOCK: {$stash->set('zebra_table',sub {my$_tt_params=$_[0]if ref($_[0])eq 'HASH';my$output='';my$stash=$context->localise($_tt_params);eval {$output .= '
';$output .= '   <table style="
        margin:5px auto;
        border: 1px solid ';$output .= $stash->get('dark_gray');$output .= ';
        padding:0;"
        cellpadding="0" cellspacing="0" >
        ';if ($stash->get('titles')){$output .= '
            <tr>
                ';do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get('titles');unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR1: while (!$_tt_error){$stash->{'title'}=$_tt_value;$output .= '
                <th style="
                    border-bottom: 1px solid ';$output .= $stash->get('dark_gray');$output .= ';
                    background-color: ';$output .= $stash->get('medium_gray');$output .= ';
                    padding: 5px;
                    ';if ($stash->get(['loop',0,'last',0])){$output .= '                    padding-right:10px;'}$output .= '
                    ';if ($stash->get(['loop',0,'first',0])){$output .= '                    padding-left:10px;'}$output .= '"
                    align="left">
                    ';$output .= $stash->get('title');$output .= '
                </th>
                ';;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};$output .= '
            </tr>
        '}$output .= '
        ';do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get('items');unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR1: while (!$_tt_error){$stash->{'item'}=$_tt_value;$output .= '
        <tr style="background-color:';$output .= $stash->get(['loop',0,'index',0])% 2 eq 1 ? $stash->get('light_gray'): $stash->get('white');$output .= ';">
            ';do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get('item');unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR2: while (!$_tt_error){$stash->{'col'}=$_tt_value;$output .= '
            <td style="
                ';if ($stash->get('boldfirst')&& $stash->get(['loop',0,'first',0])){$output .= '                font-weight:bold;'}$output .= '
                font-family: ';$output .= $stash->get('mono_font_family');$output .= ';
                padding: 5px;
                ';if ($stash->get(['loop',0,'last',0])){$output .= '                padding-right:10px;'}$output .= '
                ';if ($stash->get(['loop',0,'first',0])){$output .= '                padding-left:10px;'}$output .= '" >
                ';$output .= $stash->get('col');$output .= '
            </td>
            ';;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};$output .= '
        </tr>
        ';;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};$output .= '
   </table>
'};$stash=$context->delocalise();die $@ if $@;return$output});$output .= '
'}};if ($@){$_tt_error=$context->catch($@,\$output);die$_tt_error unless$_tt_error->type eq 'return'}return$output},DEFBLOCKS=>{},});