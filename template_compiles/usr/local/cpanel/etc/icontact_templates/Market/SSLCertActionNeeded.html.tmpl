Template::Document->new({METADATA=>{'name'=>'/usr/local/cpanel/etc/icontact_templates/Market/SSLCertActionNeeded.html.tmpl','modtime'=>'1728930269',},BLOCK=>sub {my$context=shift || die "template sub called without context\n";my$stash=$context->stash;my$output='';my$_tt_error;eval {BLOCK: {$output .= '
';$output .= $context->process('include/colors.tmpl');$output .= $context->process('include/styles.tmpl');$output .= $context->process('include/zebra_table.tmpl');$output .= $context->process('include/code_block.tmpl');$output .= do {my$output='';$stash->set(['NOTICE',0,'email_reason',0],$stash->get(['CPANEL',0,'locale',0,'maketext',['Action required to complete “[_1]” order.',$stash->get(['NOTICE',0,'product_name',0])]]));$stash->set('action_urls',$stash->get(['NOTICE',0,'action_urls',0]));$output .= '

';if ($stash->get(['action_urls',0,'ovCallbackStatus',0])){$output .= '
<p>
    ';$output .= $stash->get(['CPANEL',0,'locale',0,'maketext',['To complete the Organization Validation, you must verify your identity by phone. Use the following URL to schedule the phone call:' ]]);$output .= '

    <a href="';$output .= $stash->get(['action_urls',0,'ovCallbackStatus',0,'html',0]);$output .= '">';$output .= $stash->get(['action_urls',0,'ovCallbackStatus',0,'html',0]);$output .= '</a>
</p>
'}$output .= '

';if ($stash->get(['action_urls',0,'evClickThroughStatus',0])){$output .= '
<p>
    ';$output .= $stash->get(['CPANEL',0,'locale',0,'maketext',['To complete the Extended Validation, you must complete the form at the following URL:' ]]);$output .= '
    <a href="';$output .= $stash->get(['action_urls',0,'evClickThroughStatus',0,'html',0]);$output .= '">';$output .= $stash->get(['action_urls',0,'evClickThroughStatus',0,'html',0]);$output .= '</a>
</p>
'}$output .= '

<p>
    ';$output .= $stash->get(['CPANEL',0,'locale',0,'maketext',['The certificate order is for the following domain [numerate,_1,name,names]:',$stash->get(['NOTICE',0,'csr_domains',0,'size',0])]]);$output .= '
</p>

<ul>
    ';do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get(['NOTICE',0,'csr_domains',0]);unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR1: while (!$_tt_error){$stash->{'d'}=$_tt_value;$output .= '        <li>
            <a href="https://';$output .= $stash->get(['d',0,'html',0]);$output .= '">';$output .= $stash->get(['d',0,'html',0]);$output .= '</a>
        </li>
    ';;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};$output .= '</ul>

</p>

';$context->include('wrapper/main.html.tmpl',{'content',$output })};$output .= '
'}};if ($@){$_tt_error=$context->catch($@,\$output);die$_tt_error unless$_tt_error->type eq 'return'}return$output},DEFBLOCKS=>{},});