Template::Document->new({METADATA=>{'modtime'=>'1728930269','name'=>'/usr/local/cpanel/base/webmail/jupiter/_assets/_calendar.html.tt',},BLOCK=>sub {my$context=shift || die "template sub called without context\n";my$stash=$context->stash;my$output='';my$_tt_error;eval {BLOCK: {$stash->set('JSON',$context->plugin('JSON'));$stash->set('calendar_localization',{'MONTHS_LONG'=>'month_format_wide','MONTHS_SHORT'=>'month_format_abbreviated','START_WEEKDAY'=>'first_day_of_week','WEEKDAYS_1CHAR'=>'day_stand_alone_narrow','WEEKDAYS_MEDIUM'=>'day_format_abbreviated','WEEKDAYS_LONG'=>'day_format_wide','STRINGS'=>{'previousMonth'=>$stash->get(['locale',0,'maketext',['Previous Month' ]]),'nextMonth'=>$stash->get(['locale',0,'maketext',['Next Month' ]]),'close'=>$stash->get(['locale',0,'maketext',['Close' ]])}});$stash->set('navigator_strings',{'month'=>$stash->get(['locale',0,'maketext',['Month' ]]),'year'=>$stash->get(['locale',0,'maketext',['Year' ]]),'submit'=>$stash->get(['locale',0,'maketext',['OK' ]]),'cancel'=>$stash->get(['locale',0,'maketext',['Cancel' ]]),'invalidYear'=>$stash->get(['locale',0,'maketext',['Invalid Year' ]])});$output .= '<script type="text/javascript">
//<![CDATA[
(function() {
';$output .= do {my$output='';my ($_tt_error,$_tt_handler);eval {$output .= '
      ';$stash->set('json_file','/usr/local/cpanel/base/cjt/cldr/' .$stash->get(['locale',0,'get_language_tag',0]).'.json');$output .= '      var _cldr = ';$output .= $context->insert(('' .$stash->get('json_file')));$output .= ';
      '};if ($@){$_tt_error=$context->catch($@,\$output);die$_tt_error if$_tt_error->type =~ /^(return|stop)$/;$stash->set('error',$_tt_error);$stash->set('e',$_tt_error);if (defined ($_tt_handler=$_tt_error->select_handler())){$_tt_error=0}else {$output .= '
      ';$output='';$output .= '
      ';$stash->set('json_file','/usr/local/cpanel/base/cjt/cldr/en.json');$output .= '      // Using \'en\' CLDR data since \'';$output .= $stash->get(['locale',0,'get_language_tag',0]);$output .= '\' did not have a specific CLDR entry
      var _cldr = ';$output .= $context->insert(('' .$stash->get('json_file')));$output .= ';
      ';$_tt_error=''}}die$_tt_error if$_tt_error;$output};$output .= '
CPANEL.cldr = _cldr;

if ( "CalendarNavigator" in YAHOO.widget ) {
    YAHOO.widget.CalendarNavigator.DEFAULT_CONFIG.strings = ';$output .= $stash->get(['navigator_strings',0,'json',0]);$output .= ";\n}\n\nif ( \"Calendar\" in YAHOO.widget ) {\n    //Workaround for YUI 2 issue #2529320 and FB cases 48108 and 48119\n    //so that table cell background gradients don't clobber the cell borders\n    //in IE<9. This slows down the calendar rendering, so only apply it when\n    //necessary.\n    //This was not fixed in YUI 2.9.0.\n    if ( YAHOO.env.ua.ie && YAHOO.env.ua.ie < 9 ) {\n        [   'renderCellDefault',\n            'renderCellNotThisMonth',\n            'renderBodyCellRestricted',\n            'renderOutOfBoundsDate'\n        ].forEach( function(type) {\n            var original = YAHOO.widget.Calendar.prototype[type];\n            YAHOO.widget.Calendar.prototype[type] = function(working_date,cell) {\n                var val = original.apply(this,arguments);\n                cell.innerHTML = \"<div class=\\\"calcell-liner\\\">\"+cell.innerHTML+\"</div>\";\n            };\n        } );\n    }\n\n    var yui_localization = ";$output .= $stash->get(['calendar_localization',0,'json',0]);$output .= ';
    var DC = YAHOO.widget.Calendar.DEFAULT_CONFIG;
    for (var key in yui_localization) {
        var value = yui_localization[key];
        if (typeof value === "string") value = _cldr[value];
        DC[key].value = value;
    }

    ';$output .= '    DC.LOCALE_WEEKDAYS.value = "1char";
    ';$output .= '    ["WEEKDAYS_1CHAR","WEEKDAYS_MEDIUM","WEEKDAYS_LONG"].forEach( function(k) {
        var copy = DC[k].value.slice();  //copy the array
        copy.unshift( copy.pop() );
        DC[k].value = copy;
    } );
//    ';$output .= "    //fuzzy equality\n    if ( DC.START_WEEKDAY.value == 7 ) DC.START_WEEKDAY.value = 0;\n\n    if ( \"Calendar_With_Time\" in CPANEL.widgets ) {\n        CPANEL.widgets.Calendar_With_Time.localization = {\n            cldr_time_format_short : _cldr.time_format_short,\n            ampm                   : _cldr.am_pm_abbreviated\n        };\n    }\n}\n\nvar format_string = function (s) {\n    var substituter = function () {\n        if (arguments[1]) {\n            return arguments[1].substr( 1, arguments[1].length - 2 );\n        }\n\n        return \"{\" + arguments[2] + \"}\";\n    };\n    return s.replace(\n        /('[^']+')|(([a-zA-Z])\\3*)/g,\n        substituter\n    );\n};\n\n//enclose consecutive occurrences of the same letter with curly braces\n//so we can use YAHOO.lang.substitute on it\nCPANEL.DateTime = {\n    time_format_short: format_string(_cldr.time_format_short),\n    date_format_medium: format_string(_cldr.date_format_medium),\n    datetime_format_medium: format_string(_cldr.datetime_format_medium),\n};\nvar _format = format_string(_cldr.datetime_format)\n    .replace( '{0}', CPANEL.DateTime.time_format_short )\n    .replace( '{1}', CPANEL.DateTime.date_format_medium )\n;\nvar lpad = function(obj,length,padder) {\n    if (!padder) padder = \"0\";\n    obj = obj.toString();\n    var deficit = length - obj.length;\n    var pad = \"\";\n    while (deficit > 0) {\n        pad += padder;\n        deficit -= padder.length;\n    }\n    return pad + obj;\n};\nDate.prototype.toCpLocaleString = function(format_string) {\n    var my_date = this;\n    var substituter = function(key, value) {\n        switch(key) {\n            case \"yy\":\n                return my_date.getFullYear().toString().slice(-2);\n            case \"yyyyy\":\n                return lpad(my_date.getFullYear(), 5);\n            case \"y\":\n            case \"yyy\":\n            case \"yyyy\":\n                return my_date.getFullYear();\n            case \"MMMM\":\n                return _cldr.month_format_wide[my_date.getMonth()];\n            case \"MMM\":\n                return _cldr.month_format_abbreviated[my_date.getMonth()];\n            case \"MM\":\n                return lpad(my_date.getMonth() + 1, 2);\n            case \"M\":\n                return String(my_date.getMonth() + 1);\n            case \"MMMMM\":\n                return _cldr.month_stand_alone_narrow[my_date.getMonth()];\n            case \"dd\":\n                return lpad(my_date.getDate(),2);\n            case \"d\":\n                return my_date.getDate();\n            case \"a\":\n            case \"U\":\n                var hours = my_date.getHours();\n                return _cldr.am_pm_abbreviated[ (hours<12) ? 0 : 1 ];\n            case \"h\":\n            case \"hh\":\n                var twelve_hours = my_date.getHours();\n                if ( twelve_hours > 12 ) twelve_hours -= 12;\n                if ( twelve_hours === 0 ) twelve_hours = 12;\n                return ( key === \"hh\" ) ? lpad(twelve_hours,2) : twelve_hours;\n            case \"K\":\n            case \"KK\":\n                var eleven_hours = my_date.getHours();\n                if ( eleven_hours > 11 ) eleven_hours -= 12;\n                return ( key === \"KK\" ) ? lpad(eleven_hours,2) : eleven_hours;\n            case \"H\":\n                return my_date.getHours();\n            case \"HH\":\n                return lpad( my_date.getHours(), 2 );\n            case \"m\":\n                return my_date.getMinutes();\n            case \"mm\":\n                return lpad( my_date.getMinutes(), 2 );\n            case \"s\":\n                return my_date.getSeconds();\n            case \"ss\":\n                return lpad( my_date.getHours(), 2 );\n            case \"EEEE\":\n                return weekdays_wide[ my_date.getDay() ];\n            case \"EEE\":\n            case \"EE\":\n            case \"E\":\n                return weekdays_abbreviated[ my_date.getDay() ];\n            case \"EEEEE\":\n                return weekdays_narrow[ my_date.getDay() ];\n            default:  //timezone, which we can only represent with GMT+offset\n                var seconds = my_date.getTimezoneOffset();\n                var hours = (seconds > 0) ? \"-\" : \"+\";\n                hours += lpad( Math.floor(Math.abs(seconds)/60), 2 );\n                var minutes = lpad( seconds%60, 2 );\n                return \"GMT\"+hours+minutes;\n        }\n    };\n    if ( !format_string ) format_string = _format;\n\n    return YAHOO.lang.substitute( format_string, null, substituter );\n};\n})();\n\nCPANEL.time_selector = function (target_input, opts) {\n\n    opts = (/object/i.test(typeof opts)) ? opts : {}\n\n	// takes a text input line and creates a standard time selector input in its place.\n	// the original input is hidden but otherwise left untouched.\n	// user-selected values will populate the original input for seamless form handling.\n	// The value populated is always hh:mm:00 (military time).\n	// The selector currently has no seconds resolution (if one is added in the future\n	// it should be triggered as a property in opts so as not to interfere with pages\n	// which expect no seconds resolution.\n	//\n	// opts.stylesheet : string -- defines a url path for an alternate stylesheet to use\n	// for selectors on this page.   The first selector construction loads the stylesheet\n	// no subsequent stylesheets are loaded -- ever so one style for all time selectors.\n	// the default stylesheet is /cjt/css/timeSelector-cpanel.css\n	//\n	// Construction fails if the target_element does not exist, if the target_element\n	// is not an input tag, is not type text, or if this input already has been turned\n	// into a standard time selector.\n	//\n	// <input type='text' id='startTime' name='start-time' />\n	// new CPANEL.time_selector('startTime', {stylesheet: '/cjt/css/mystylesheet.css'})\n\n    var original_object = target_input;\n\n	if ( !(this instanceof CPANEL.time_selector) )\n	      return new CPANEL.time_selector( target_input, opts );\n\n	if (/string/i.test(typeof target_input))\n		target_input = document.getElementById(target_input);\n\n    this.failed = false;\n\n	if (!target_input || !target_input.ownerDocument || !(target_input.ownerDocument === document)) {\n		this.failed = locale.maketext(\"Invalid DOM object or object ID.\");\n	}\n	else if (!/input/i.test(target_input.tagName)) {\n		this.failed = locale.maketext(\"The DOM element must be an input tag.\");\n	}\n	else if (!/text|hidden/i.test(target_input.type)) {\n		this.failed = locale.maketext(\"The [asis,input] tag must declare itself to be [asis,type=chr(34)textchr(34)].\");\n	}\n	else if (/cpanel-time-selector-container/i.test(target_input.parentNode.className)) {\n		this.failed = locale.maketext(\"This element has already been turned into a time selector.\");\n	}\n\n	// Failure -- log it if the console is open, otherwise just note the\n	// failure and return.\n    if (this.failed) {\n	   	if (window.console && console.log) {\n			console.log('Time Selector Construction: ' + this.failed);\n			console.log(original_object);\n		}\n		return false;\n    }\n\n    // Localize AM & PM or 24 hours for locales which don't use AM/PM\n	var lang = {}\n	lang.am=CPANEL.cldr.am_pm_abbreviated[0];\n	lang.pm=CPANEL.cldr.am_pm_abbreviated[1];\n	lang.max_hours = (CPANEL.cldr.prefers_24_hour_time) ? 23 : 12;\n	lang.min_hours = (CPANEL.cldr.prefers_24_hour_time) ? 0 : 1;\n\n	// Attach the stylesheet.   Another instance of this object may have already done so.\n	// if the ID of the automatically attached stylesheet isn't present then it's safe\n	// to attach.  Otherwise nothing happens.\n	if (!document.getElementById('time-selector-stylesheet')) {\n		var newCSS = document.createElement('link');\n		newCSS.rel='stylesheet';\n		newCSS.type='text/css';\n		newCSS.href= (opts.stylesheet) ? opts.stylesheet : '/cjt/css/timeSelector-cpanel.css?';\n		newCSS.id='time-selector-stylesheet';\n		document.getElementsByTagName('head')[0].appendChild(newCSS);\n	}\n\n    // Each instance of this object will increase this counter by one\n	// giving us a unique ID for each time selector on a page.\n	if (!('id_cache' in this))\n		CPANEL.time_selector.prototype.id_cache = 1;\n\n\n	// This function just adds a 0 in front of numbers less than 10\n	// and keeps hours and minutes inside their respective ranges.\n	var pretty_numbers = function (num, isHours, direction) {\n		    // make sure num is an integer and isn't being\n			// treated as an octal.\n			num = parseInt(num.toString().replace(/^0+/,''));\n			if (isNaN(num))\n				num = 0;\n			if (direction) {\n				num = direction + num;\n			}\n		    if (isHours) {\n			    if (num < lang.min_hours)\n					num = lang.max_hours;\n				if (num > lang.max_hours)\n					num = lang.min_hours;\n			}\n			else {\n				if (num < 0)\n					num = 59\n				if (num > 59)\n					num = 0;\n			}\n			if (synchronize_original_input)\n				synchronize_original_input();\n			return (num<10) ? '0' + num : num;\n    }\n\n	// Try to make sense of the time in the default input field.\n	// If Javascript can't make it into a real date, use \"now\".\n	// We expect time to be in its own input field with a default\n	// format of hh:mm:ss anything else will probably cause this\n	// code to consistently fail.\n	var default_time = new Date();\n	if (target_input.value) {\n		var init_time = target_input.value.split(':');\n		default_time.setHours(init_time[0]);\n		default_time.setMinutes(init_time[1]);\n		if (/Invalid Date/i.test(default_time))\n			default_time = new Date();\n	}\n\n	// Convert military time to civilian time and set ampm\n	var initial_hours = default_time.getHours();\n	var ampm = lang.am;\n	if (!CPANEL.cldr.prefers_24_hour_time) {\n		if (initial_hours>11) {\n			initial_hours -= 12;\n			ampm = lang.pm;\n		}\n		if (!initial_hours)\n			initial_hours = 12;\n	}\n	else {\n		ampm = lang.am;\n	}\n	initial_hours = pretty_numbers(initial_hours);\n	var initial_minutes = pretty_numbers(default_time.getMinutes());\n\n	// Grab a unique ID for this selector\n	var unique_id = this.id_cache;\n	CPANEL.time_selector.prototype.id_cache += 1;\n\n	// Build the HTML for the time selector.\n	// Long classnames and ID are used to reduce namespace collision and make it\n	// easier to see what is being styled.\n	var container_div = document.createElement('div');\n    container_div.className = 'cpanel-time-selector-container group';\n    container_div.id = 'cpanel-time-selector-id-' + unique_id;\n\n    var hrs = '';\n	hrs += \"<div class='cpanel-time-selector-hours-group'>\";\n    hrs += \"<input autocomplete='off' size='2' maxlength='2' type='text' id='cpanel-time-selector-hours-\"+unique_id+\"' class='cpanel-time-selector-input cpanel-time-selector-hours' value='\"+ initial_hours+\"' />\";\n    hrs += \"<div class='cpanel-button-group cpanel-hours-button-group'>\";\n    hrs += \"<button type='button' tabindex='-1' id='cpanel-increment-hours-\" + unique_id+\"' class='cpanel-time-selector-arrow-button cpanel-time-selector-hours-up'></button>\";\n    hrs += \"<button type='button' tabindex='-1' id='cpanel-decrement-hours-\" + unique_id+\"' class='cpanel-time-selector-arrow-button cpanel-time-selector-hours-down'></button>\";\n    hrs += \"</div>\";\n    hrs += \"</div>\";\n\n    var mins = '';\n    mins += \"<div class='cpanel-time-selector-minutes-group'>\";\n    mins += \"<input autocomplete='off' size='2' maxlength='2' type='text' id='cpanel-time-selector-minutes-\"+unique_id+\"' value='\"+ initial_minutes+\"' class='cpanel-time-selector-input cpanel-time-selector-minutes' />\";\n    mins += \"<div class='cpanel-button-group cpanel-minutes-button-group'>\";\n    mins += \"<button type='button' tabindex='-1' id='cpanel-increment-minutes-\" + unique_id+\"' class='cpanel-time-selector-arrow-button cpanel-time-selector-minutes-up'></button>\";\n    mins += \"<button type='button' tabindex='-1' id='cpanel-decrement-minutes-\" + unique_id+\"' class='cpanel-time-selector-arrow-button cpanel-time-selector-minutes-down'></button>\";\n    mins += \"</div>\";\n    mins += \"</div>\";\n\n    var ampmhtml = '';\n    ampmhtml += \"<div id='ampm-selector-group-\"+ unique_id +\"' class='cpanel-time-selector-ampm-group'>\";\n    ampmhtml += \"<button type='button' id='cpanel-am-\" + unique_id+\"' class='cpanel-time-selector-ampm-button'>\"+lang.am+\"</button>\";\n    ampmhtml += \"<button type='button' id='cpanel-pm-\" + unique_id+\"' class='cpanel-time-selector-ampm-button'>\"+lang.pm+\"</button>\";\n    ampmhtml += \"</div>\";\n\n	container_div.innerHTML = YAHOO.lang.substitute( CPANEL.DateTime.time_format_short, null, function(key, value) {\n        switch(key) {\n            case \"a\":\n            case \"aa\":\n            case \"U\":\n				return ampmhtml;\n            case \"h\":\n            case \"hh\":\n            case \"K\":\n            case \"KK\":\n            case \"H\":\n            case \"HH\":\n				return hrs;\n            case \"m\":\n            case \"mm\":\n				return mins;\n            default:\n                return '';\n        }\n    });\n\n	// Hide the original input field.\n    target_input.style.display='none';\n\n	// At the position of the original input field attach the new div and\n	// move the hidden original input field under it.\n	target_input.parentNode.replaceChild(container_div, target_input);\n	container_div.appendChild(target_input);\n\n	// Cache some commonly accessed DOM elements.\n	var hours_input = document.getElementById('cpanel-time-selector-hours-'+unique_id);\n	var minutes_input = document.getElementById('cpanel-time-selector-minutes-' + unique_id);\n	var am_button = document.getElementById('cpanel-am-'+unique_id);\n	var pm_button = document.getElementById('cpanel-pm-'+unique_id);\n\n	// Setup allowed keystrokes.\n	var allowed_keystrokes = {\n        37 : true, // left\n        39 : true, // right\n        8  : true, // backspace\n        9  : true, // tab\n        13 : true, // enter\n        35 : true, // end\n        36 : true, // home\n        46 : true, // delete\n        48 : true, // 0\n        49 : true,\n        50 : true,\n        51 : true,\n        52 : true,\n        53 : true,\n        54 : true,\n        55 : true,\n        56 : true,\n        57 : true, // 9,\n        96 : true, // 0, numeric keypad\n        97 : true,\n        98 : true,\n        99 : true,\n        100: true,\n        101: true,\n        102: true,\n        103: true,\n        104: true,\n        105: true  // 9, numeric keypad\n	}\n\n	// This method takes the value of the time selectors and populates the original hidden\n	// input field.  The replace to strip leading zeros from the hours is to eliminate the\n	// chance javascript will treat the number as an octal.\n	var synchronize_original_input = function () {\n		if (!CPANEL.cldr.prefers_24_hour_time) {\n			var military_time = (ampm==lang.pm) ? (parseInt(hours_input.value.replace(/^0/,''))+12) : hours_input.value;\n			if (military_time==24 || military_time==12)\n				military_time = (ampm==lang.pm) ? 12 : 0;\n		}\n		else {\n			military_time = hours_input.value;\n		}\n		target_input.value = military_time + ':' + minutes_input.value + ':00';\n	}\n\n	// Setup the events.\n	var handle_keydown = function (e) {\n		if (/number/i.test(typeof interval_pointer))\n	   		clearInterval(interval_pointer);\n   		interval_pointer = new Date();\n		var srcElement = e.srcElement || e.target;\n		var is_hours = false;\n		if (/hours/i.test(srcElement.id)) {\n			is_hours = true;\n		}\n        if (e.keyCode==38) {\n			srcElement.value = pretty_numbers(srcElement.value, is_hours, 1);\n		}\n		else if (e.keyCode==40) {\n			srcElement.value = pretty_numbers(srcElement.value, is_hours, -1);\n		}\n		if (!(e.keyCode in allowed_keystrokes)) {\n			YAHOO.util.Event.preventDefault(e);\n			YAHOO.util.Event.stopPropagation(e);\n			return false;\n		}\n\n	}\n\n	// Focus event, just cache the contents of the input field\n	// since we know its good.\n	var handle_focus = function (e) {\n		var srcElement = e.srcElement || e.target;\n		last_valid_value = srcElement.value;\n	}\n\n\n	// Blur event.  Check the validity and restore the\n	// focus value if the entry is not valid (IE 99).\n	var handle_blur = function (e) {\n\n		var srcElement = e.srcElement || e.target;\n\n		var is_minute = (/minute/i.test(srcElement.id)) ? true : false;\n\n		if (srcElement.value != '') {\n			var safe_int = parseInt(srcElement.value.replace(/^0/,''));\n			if (srcElement.value == '0') {\n				srcElement.value = pretty_numbers(last_valid_value, !is_minute );\n				return;\n			}\n			if (isNaN(safe_int)) {\n				srcElement.value = pretty_numbers(last_valid_value, !is_minute );\n				return;\n			}\n			var max_value = (is_minute) ? 59 : lang.max_hours;\n			if (safe_int<0 || safe_int > max_value) {\n                                if (!is_minute) {\n                                    var safe_int = parseInt(srcElement.value.replace(/^0/,''));\n                                    if (safe_int > 12 && safe_int < 24 && lang.max_hours==12) {\n                                        safe_int = safe_int - 12;\n                                        ampm = lang.pm;\n                                        pm_button.click();\n                                    } else {\n                                        safe_int=last_valid_value;\n                                    }\n                                    srcElement.value = pretty_numbers(safe_int, !is_minute );\n                                    last_valid_value=safe_int;\n                                } else {\n                                    srcElement.value = pretty_numbers(last_valid_value, !is_minute );\n                                }\n                                return;\n			}\n                        last_valid_value = srcElement.value;\n		}\n		srcElement.value = pretty_numbers(srcElement.value.replace(/^0/,''), !is_minute);\n		synchronize_original_input();\n	}\n\n\n	var handle_click = function (e) {\n		YAHOO.util.Event.preventDefault(e);\n		YAHOO.util.Event.stopPropagation(e);\n		if (/number/i.test(typeof interval_pointer))\n	   		clearInterval(interval_pointer);\n   		interval_pointer = new Date();	}\n\n    // an object global that tracks the set_interval pointer for\n	// repeating upticks or downticks when a direction button is\n	// held.  When not an interval pointer its a date object so we\n	// can wait a few microseconds before instancing another timer.\n	var interval_pointer;\n\n	var handle_mouseup = function (e) {\n		if (/number/i.test(typeof interval_pointer))\n	   		clearInterval(interval_pointer);\n   		interval_pointer = new Date();\n	}\n\n	var handle_mouseout = function (e) {\n		if (/number/i.test(typeof interval_pointer))\n	   		clearInterval(interval_pointer);\n	    interval_pointer=new Date();\n	}\n\n	var handle_mousedown = function(e) {\n		YAHOO.util.Event.preventDefault(e);\n		YAHOO.util.Event.stopPropagation(e);\n		// sometimes a mouseup event generates a new mousedown event.\n		// So we cache the release event with a date object so we\n		// can test to see if enough time has passed for this to be\n		// a _real_ mousedown event.\n		if (interval_pointer instanceof Date) {\n			var now = new Date();\n			if (now.getTime()-interval_pointer.getTime() < 20) return\n			interval_pointer=false;\n		}\n		if (interval_pointer) return;\n\n		var srcElement = e.srcElement || e.target;\n		var is_hours = false;\n\n		var direction = (/increment/i.test(srcElement.id)) ? parseInt(1) : parseInt(-1);\n		if (/hours/i.test(srcElement.id)) {\n			var source_input = hours_input; // hours_input = cached DOM\n			var is_hours = true;\n			hours_input.value = pretty_numbers(source_input.value, is_hours, direction)\n		}\n		else {\n			var source_input = minutes_input;\n			var is_hours = false;\n			minutes_input.value = pretty_numbers(source_input.value, is_hours, direction)\n		}\n        synchronize_original_input();\n\n        // User is holding the mouse down on an increment/decrement button.\n        var first_tick_delay = function () {\n			// After 900ms we start the autotick.\n	       	source_input.value = pretty_numbers(source_input.value, is_hours, direction);\n	       	clearInterval(interval_pointer);\n	       	interval_pointer = setInterval( function () {\n				source_input.value = pretty_numbers(source_input.value, is_hours, direction);\n			}, is_hours ? 300 : 100); // Hours increment at 300ms, Minutes 3x faster at 100ms.\n        }\n		// We wait almost a second before starting the autotick.\n        interval_pointer = setInterval( first_tick_delay, 900);\n		return false;\n	}\n\n	var handle_ampm = function (e) {\n		if (!e) return;\n		var srcElement = e.srcElement || e.target || e;\n		if (/pm/i.test(srcElement.id)) {\n			am_button.className = 'cpanel-time-selector-ampm-button cpanelcpanel-time-selector-ampm-unselected cpanel-time-selector-am-unselected';\n			pm_button.className = 'cpanel-time-selector-ampm-button cpanel-time-selector-ampm-selected cpanel-time-selector-pm-selected';\n			ampm = lang.pm;\n		}\n		else {\n			am_button.className = 'cpanel-time-selector-ampm-button cpanel-time-selector-ampm-selected cpanel-time-selector-am-selected';\n			pm_button.className = 'cpanel-time-selector-ampm-button cpanel-time-selector-ampm-unselected cpanel-time-selector-pm-unselected';\n			ampm = lang.am;\n		}\n		synchronize_original_input();\n		YAHOO.util.Event.preventDefault(e);\n		YAHOO.util.Event.stopPropagation(e);\n        return false;\n	}\n\n	if (ampm == lang.am) {\n		handle_ampm(am_button);\n	} else\n	{\n		handle_ampm(pm_button);\n	}\n\n	synchronize_original_input();\n\n	// Setup the events.\n	EVENT.on('cpanel-time-selector-hours-'+unique_id, 'keydown', handle_keydown, this);\n	EVENT.on('cpanel-time-selector-hours-'+unique_id, 'blur', handle_blur, this);\n	EVENT.on('cpanel-time-selector-hours-'+unique_id, 'focus', handle_focus, this);\n\n	EVENT.on('cpanel-time-selector-minutes-'+unique_id, 'keydown', handle_keydown, this);\n	EVENT.on('cpanel-time-selector-minutes-'+unique_id, 'blur', handle_blur, this);\n	EVENT.on('cpanel-time-selector-minutes-'+unique_id, 'focus', handle_focus, this);\n\n	EVENT.on('cpanel-increment-hours-' + unique_id, 'mousedown', handle_mousedown, this);\n	EVENT.on('cpanel-increment-hours-' + unique_id, 'mouseout', handle_mouseout, this);\n	EVENT.on('cpanel-increment-hours-' + unique_id, 'mouseup', handle_mouseup, this);\n	EVENT.on('cpanel-increment-hours-' + unique_id, 'click', handle_mousedown, this);\n\n	EVENT.on('cpanel-decrement-hours-' + unique_id, 'mousedown', handle_mousedown, this);\n	EVENT.on('cpanel-decrement-hours-' + unique_id, 'mouseout', handle_mouseout, this);\n	EVENT.on('cpanel-decrement-hours-' + unique_id, 'mouseup', handle_mouseup, this);\n	EVENT.on('cpanel-decrement-hours-' + unique_id, 'click', handle_mousedown, this);\n\n	EVENT.on('cpanel-increment-minutes-' + unique_id, 'mousedown', handle_mousedown, this);\n	EVENT.on('cpanel-increment-minutes-' + unique_id, 'mouseout', handle_mouseout, this);\n	EVENT.on('cpanel-increment-minutes-' + unique_id, 'mouseup', handle_mouseup, this);\n	EVENT.on('cpanel-increment-minutes-' + unique_id, 'click', handle_mousedown, this);\n\n	EVENT.on('cpanel-decrement-minutes-' + unique_id, 'mousedown', handle_mousedown, this);\n	EVENT.on('cpanel-decrement-minutes-' + unique_id, 'mouseout', handle_mouseout, this);\n	EVENT.on('cpanel-decrement-minutes-' + unique_id, 'mouseup', handle_mouseup, this);\n	EVENT.on('cpanel-decrement-minutes-' + unique_id, 'click', handle_mousedown, this);\n\n	EVENT.on('cpanel-am-' + unique_id, 'click', handle_ampm, this);\n	EVENT.on('cpanel-pm-' + unique_id, 'click', handle_ampm, this);\n\n\n}\n\n// Autopopulate any date-hint freeforms\nCPANEL.populate_date_hints = function () {\n        // Not ready for prime time.\n        return;\n	var  els = YAHOO.util.Dom.getElementsByClassName('cpanel-date-hint');\n	if (els ) {\n		for (var i=els.length-1; i >= 0; i--) {\n			els[i].innerHTML = YAHOO.lang.substitute( CPANEL.cldr.date_format_short.replace(/(([ymdez])\\2*)/gi,\"{\$1}\"), null, function(key, value) {\n		        switch(key) {\n		            case \"yy\":\n		            case \"yyyyy\":\n		            case \"y\":\n		            case \"yyy\":\n		            case \"yyyy\":\n		                return 'yyyy';\n		            case \"MMMM\":\n		            case \"MMM\":\n		            case \"MM\":\n		            case \"M\":\n		            case \"MMMMM\":\n		                return 'mm';\n		            case \"dd\":\n		            case \"d\":\n		                return 'dd';\n		        }\n		    });\n		}\n	}\n}();\n\n//]]>\n</script>\n<style type=\"text/css\">\n.cjt_calendarwithtime {\n    text-align: center;\n    margin-top: 5px;\n}\n.cjt_calendarwithtime_hours,\n.cjt_calendarwithtime_minutes {\n    width: 1.5em;\n    text-align: right;\n}\n</style>\n"}};if ($@){$_tt_error=$context->catch($@,\$output);die$_tt_error unless$_tt_error->type eq 'return'}return$output},DEFBLOCKS=>{},});