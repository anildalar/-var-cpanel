Template::Document->new({METADATA=>{'modtime'=>'1728930269','name'=>'/usr/local/cpanel/base/webmail/jupiter/mail/clientconfinclude.html.tt',},BLOCK=>sub {my$context=shift || die "template sub called without context\n";my$stash=$context->stash;my$output='';my$_tt_error;eval {BLOCK: {$output .= $context->process('_assets/_ajaxapp_header.html.tt');$stash->set('JSON',$context->plugin('JSON'));$stash->set('HTTP',$context->plugin('HTTP'));$stash->set('ExpVar',$context->plugin('ExpVar'));if (!$stash->get(['CPANEL',0,'FORM',0,'acct',0])){$stash->set(['CPANEL',0,'FORM',0,'acct',0],$stash->get(['ExpVar',0,'expand',['$authuser' ]]))}$stash->set('account',$stash->get(['CPANEL',0,'FORM',0,'acct',0]));$stash->set('from_archiving',$stash->get(['CPANEL',0,'get_raw_form',['archiving' ]]));if (!$stash->get('mail_client_settings')){$stash->set('mail_client_settings',$stash->get(['execute',['Email','get_client_settings',{'account'=>$stash->get(['CPANEL',0,'FORM',0,'acct',0])}],'data',0]))}$stash->set('apps',[]);$stash->set('proxysubdomains',$stash->get(['CPANEL',0,'CPCONF',0,'proxysubdomains',0])&& $stash->get(['CPANEL',0,'CPCONF',0,'autodiscover_proxy_subdomains',0]));$stash->set('is_unix',$stash->get(['CPANEL',0,'ENV',0,'HTTP_USER_AGENT',0,'match',['[Ll]inux' ]])|| $stash->get(['CPANEL',0,'ENV',0,'HTTP_USER_AGENT',0,'match',['[Ff]reeBSD' ]]));$stash->set('MACUA',$stash->get(['CPANEL',0,'ENV',0,'HTTP_USER_AGENT',0,'replace',['_','.' ]]));$stash->set('mac_os_version',$stash->get(['CPANEL',0,'ENV',0,'HTTP_USER_AGENT',0,'match',['[Mm]acintosh' ]])&& $stash->get(['MACUA',0,'match',['Mac OS X (\d+)\.(\d+)' ]]));$stash->set('is_at_least_lion',($stash->get(['mac_os_version',0,0,0])&& $stash->get(['mac_os_version',0,0,0])>= 10 && $stash->get(['mac_os_version',0,1,0])&& $stash->get(['mac_os_version',0,1,0])>= 7));$stash->set('is_at_least_mountain_lion',($stash->get(['mac_os_version',0,0,0])&& $stash->get(['mac_os_version',0,0,0])>= 10 && $stash->get(['mac_os_version',0,1,0])&& $stash->get(['mac_os_version',0,1,0])>= 8));$stash->set('is_ios',$stash->get(['CPANEL',0,'ENV',0,'HTTP_USER_AGENT',0,'match',['iPad' ]])|| $stash->get(['CPANEL',0,'ENV',0,'HTTP_USER_AGENT',0,'match',['iPhone' ]])|| $stash->get(['CPANEL',0,'ENV',0,'HTTP_USER_AGENT',0,'match',['iPod' ]])|| (!$stash->get('from_archiving')&& $stash->get('is_at_least_mountain_lion')));$stash->set('is_mac',$stash->get('mac_os_version')&&!$stash->get('is_ios'));$stash->set('ios_apps',[{'key'=>'ios','label'=>$stash->get(['locale',0,'maketext',['[asis,iOS] for [asis,iPhone/iPad/iPod] and [asis,MacOS®] [asis,Mail.app®]' ]]),'note'=>'','urlgen'=>'ios_url' }]);$stash->set('unix_apps',[]);if ($stash->get('proxysubdomains')){$stash->set('unix_apps',$stash->get(['unix_apps',0,'merge',[[{'key'=>'thunderbird','label'=>'Mozilla Thunderbird®','note'=>'','urlgen'=>'autoconfig' },{'key'=>'kmail','label'=>'KDE Kmail','note'=>'','urlgen'=>'autoconfig' }]]]))}if ($stash->get('is_mac')){$stash->set('recommended',$stash->get(['locale',0,'maketext',['[output,strong,Recommended] version for your operating system.' ]]));$stash->set(['ios_apps',0,0,0,'note',0],($stash->get('recommended').'<br>' .$stash->get(['ios_apps',0,0,0,'note',0])))}$stash->set('mac_mail_url_ssl','');do {my$output='';my$_tt_oldv=$stash->get('view');my$_tt_view=$context->view({'blocks',{'hash'=>sub {my$context=shift || die "template sub called without context\n";my$stash=$context->stash;my$output='';my$_tt_error;eval {BLOCK: {$stash->set('imap_host',$stash->get('mac_mail_url_ssl')? $stash->get(['mail_client_settings',0,'inbox_host',0]): $stash->get(['mail_client_settings',0,'mail_domain',0]));$stash->set('my_port',$stash->get('mac_mail_url_ssl')? $stash->get(['mail_client_settings',0,'smtp_port',0]): $stash->get(['mail_client_settings',0,'smtp_insecure_port',0]));$stash->set('url_parts',[$stash->get(['CPANEL',0,'get_raw_form',['acct' ]]),$stash->get('imap_host'),$stash->get('my_port'),$stash->get('mac_mail_url_ssl'),$stash->get('has_maildir')]);if ($stash->get(['item',0,'version',0])){$output .= $stash->get(['url_parts',0,'push',[$stash->get(['item',0,'version',0])]])}$stash->set('qs',$stash->get(['url_parts',0,'join',['|' ],'uri',0]));$output .= ($stash->get('cp_security_token').'/backend/mailappsetup.cgi?' .$stash->get('qs'))}};if ($@){$_tt_error=$context->catch($@,\$output);die$_tt_error unless$_tt_error->type eq 'return'}return$output}}});$stash->set('mac_mail_url',$_tt_view);$stash->set('view',$_tt_view);$stash->set('view',$_tt_oldv);$_tt_view->seal()};$stash->set('wlm_url_type','imap');$stash->set('wlm_url_ssl',0);do {my$output='';my$_tt_oldv=$stash->get('view');my$_tt_view=$context->view({'blocks',{'hash'=>sub {my$context=shift || die "template sub called without context\n";my$stash=$context->stash;my$output='';my$_tt_error;eval {BLOCK: {$stash->set('my_inc_host',$stash->get('wlm_url_ssl')? $stash->get(['mail_client_settings',0,'inbox_host',0]): $stash->get(['mail_client_settings',0,'mail_domain',0]));$stash->set('my_out_host',$stash->get('wlm_url_ssl')? $stash->get(['mail_client_settings',0,'smtp_host',0]): $stash->get(['mail_client_settings',0,'mail_domain',0]));$stash->set('my_port',$stash->get('wlm_url_ssl')? $stash->get(['mail_client_settings',0,'smtp_port',0]): $stash->get(['mail_client_settings',0,'smtp_insecure_port',0]));$output .= ($stash->get('cp_security_token').'/backend/emailsetup-livemail.cgi?').$stash->get(['HTTP',0,'make_query_string',[{'acct'=>$stash->get(['CPANEL',0,'get_raw_form',['acct' ]]),'type'=>$stash->get('wlm_url_type'),'inc_host'=>$stash->get('my_inc_host'),'out_host'=>$stash->get('my_out_host'),'usessl'=>$stash->get('wlm_url_ssl'),'smtpport'=>$stash->get('my_port'),'archive'=>$stash->get('from_archiving')}]])}};if ($@){$_tt_error=$context->catch($@,\$output);die$_tt_error unless$_tt_error->type eq 'return'}return$output}}});$stash->set('wlm_url',$_tt_view);$stash->set('view',$_tt_view);$stash->set('view',$_tt_oldv);$_tt_view->seal()};$stash->set('ios_url_type','imap');$stash->set('ios_url_ssl',0);do {my$output='';my$_tt_oldv=$stash->get('view');my$_tt_view=$context->view({'blocks',{'hash'=>sub {my$context=shift || die "template sub called without context\n";my$stash=$context->stash;my$output='';my$_tt_error;eval {BLOCK: {$stash->set('my_inc_host',$stash->get('ios_url_ssl')? $stash->get(['mail_client_settings',0,'inbox_host',0]): $stash->get(['mail_client_settings',0,'mail_domain',0]));$stash->set('my_out_host',$stash->get('ios_url_ssl')? $stash->get(['mail_client_settings',0,'smtp_host',0]): $stash->get(['mail_client_settings',0,'mail_domain',0]));$stash->set('my_port',$stash->get('ios_url_ssl')? $stash->get(['mail_client_settings',0,'smtp_port',0]): $stash->get(['mail_client_settings',0,'smtp_insecure_port',0]));$output .= ($stash->get('cp_security_token').'/backend/emailsetup-ios.cgi?').$stash->get(['HTTP',0,'make_query_string',[{'acct'=>$stash->get(['CPANEL',0,'get_raw_form',['acct' ]]),'type'=>$stash->get('ios_url_type'),'inc_host'=>$stash->get('my_inc_host'),'out_host'=>$stash->get('my_out_host'),'usessl'=>$stash->get('ios_url_ssl'),'smtpport'=>$stash->get('my_port'),'archive'=>$stash->get('from_archiving')}]])}};if ($@){$_tt_error=$context->catch($@,\$output);die$_tt_error unless$_tt_error->type eq 'return'}return$output}}});$stash->set('ios_url',$_tt_view);$stash->set('view',$_tt_view);$stash->set('view',$_tt_oldv);$_tt_view->seal()};$stash->set('ms_apps',[]);if ($stash->get('proxysubdomains')){$stash->set('ms_apps',$stash->get(['ms_apps',0,'merge',[[{'key'=>'windows10mail','label'=>'Mail for Windows® 10','note'=>'','urlgen'=>'autodiscover' }]]]));$stash->set('ms_apps',$stash->get(['ms_apps',0,'merge',[[{'key'=>'outlook2010','label'=>'Microsoft Outlook 2010® for Windows®','note'=>'','urlgen'=>'autodiscover' }]]]))}$stash->set('ms_apps',$stash->get(['ms_apps',0,'merge',[[{'key'=>'livemail','label'=>'Windows Live Mail®','note'=>$stash->get(['locale',0,'maketext',['Make sure to close Windows Live Mail® before running this script. Once the script is completed, it will automatically start Windows Live Mail®.' ]]),'urlgen'=>'wlm_url' }]]]));if ($stash->get('proxysubdomains')){$stash->set('ms_apps',$stash->get(['ms_apps',0,'merge',[[{'key'=>'outlook2007','label'=>'Microsoft Outlook 2007® for Windows®','note'=>'','urlgen'=>'autodiscover' }]]]))}if ($stash->get('is_ios')){$stash->set('apps',$stash->get(['apps',0,'merge',[$stash->get('ios_apps')]]));$stash->set('apps',$stash->get(['apps',0,'merge',[$stash->get('unix_apps')]]));$stash->set('apps',$stash->get(['apps',0,'merge',[$stash->get('ms_apps')]]))}elsif ($stash->get('is_unix')){$stash->set('apps',$stash->get(['apps',0,'merge',[$stash->get('unix_apps')]]));$stash->set('apps',$stash->get(['apps',0,'merge',[$stash->get('ios_apps')]]));$stash->set('apps',$stash->get(['apps',0,'merge',[$stash->get('ms_apps')]]))}elsif ($stash->get('is_mac')){$stash->set('apps',$stash->get(['apps',0,'merge',[$stash->get('ios_apps')]]));$stash->set('apps',$stash->get(['apps',0,'merge',[$stash->get('unix_apps')]]));$stash->set('apps',$stash->get(['apps',0,'merge',[$stash->get('ms_apps')]]))}else {$stash->set('apps',$stash->get(['apps',0,'merge',[$stash->get('ms_apps')]]));$stash->set('apps',$stash->get(['apps',0,'merge',[$stash->get('ios_apps')]]));$stash->set('apps',$stash->get(['apps',0,'merge',[$stash->get('unix_apps')]]))}$stash->set('ssl_loop',[0,1 ]);$stash->set('has_plaintext_auth',$stash->get(['mail_client_settings',0,'has_plaintext_authentication',0]));if (!$stash->get('has_plaintext_auth')){$stash->set('ssl_loop',[1 ])}do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get('apps');unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR1: while (!$_tt_error){$stash->{'app'}=$_tt_value;$stash->set(['app',0,'urls',0],{});if ($stash->get(['app',0,'urlgen',0])eq 'autoconfig'){$stash->set(['app',0,'urls',0,'autoconfig',0],1)}elsif ($stash->get(['app',0,'urlgen',0])eq 'autodiscover'){$stash->set(['app',0,'urls',0,'autodiscover',0],1)}else {$stash->set('protocols',['imap','pop3' ]);if ($stash->get(['app',0,'urlgen',0])eq 'mac' || $stash->get(['app',0,'urlgen',0])eq 'ios_url'){$stash->set('protocols',['imap' ])}do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get('protocols');unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR2: while (!$_tt_error){$stash->{'protocol'}=$_tt_value;do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get('ssl_loop');unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR3: while (!$_tt_error){$stash->{'ssl'}=$_tt_value;$stash->set('new_key',$stash->get('protocol').($stash->get('ssl')? 's' : ''));if ($stash->get(['app',0,'urlgen',0])eq 'wlm_url'){$stash->set('wlm_url_type',$stash->get('protocol'));$stash->set('wlm_url_ssl',$stash->get('ssl'));$stash->set(['app',0,'urls',0,$stash->get('new_key'),0],$stash->get(['wlm_url',0,'print',[$stash->get('app')]]))}elsif ($stash->get(['app',0,'urlgen',0])eq 'ios_url'){$stash->set('ios_url_type',$stash->get('protocol'));$stash->set('ios_url_ssl',$stash->get('ssl'));$stash->set(['app',0,'urls',0,$stash->get('new_key'),0],$stash->get(['ios_url',0,'print',[$stash->get('app')]]))}elsif ($stash->get(['app',0,'urlgen',0])eq 'mac'){$stash->set('mac_mail_url_type',$stash->get('protocol'));$stash->set('mac_mail_url_ssl',$stash->get('ssl'));$stash->set(['app',0,'urls',0,$stash->get('new_key'),0],$stash->get(['mac_mail_url',0,'print',[$stash->get('app')]]))};($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error}};($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};if (!$stash->get('from_archiving')){$stash->set('protocol_order',['imaps','pop3s','imap','pop3','autoconfig','autodiscover' ])}else {$stash->set('protocol_order',['imaps','imap','autoconfig','autodiscover' ])}$stash->set('secure_protocols',{'imaps'=>1,'pop3s'=>1,'autoconfig'=>1,'autodiscover'=>1 });$stash->set('protocol_desc',{'autodiscover'=>{'label'=>$stash->get(['locale',0,'maketext',['Auto Discovery' ]]),'hover'=>$stash->get(['locale',0,'maketext',['Microsoft Auto Discovery Protocol' ]])},'autoconfig'=>{'label'=>$stash->get(['locale',0,'maketext',['Auto Config' ]]),'hover'=>$stash->get(['locale',0,'maketext',['[asis,Mozilla] Auto Configuration: [_1]','1.1' ]])},'imaps'=>{'label'=>$stash->get(['locale',0,'maketext',['IMAP over SSL/TLS' ]]),'hover'=>$stash->get(['locale',0,'maketext',['IMAP Mail Protocol over SSL/TLS (IMAPS)' ]])},'pop3s'=>{'label'=>$stash->get(['locale',0,'maketext',['POP3 over SSL/TLS' ]]),'hover'=>$stash->get(['locale',0,'maketext',['POP3 Mail Protocol over SSL/TLS (POP3S)' ]])},'imap'=>{'label'=>'IMAP','hover'=>$stash->get(['locale',0,'maketext',['IMAP Mail Protocol' ]])},'pop3'=>{'label'=>$stash->get(['locale',0,'maketext_plain_context',['[output,acronym,POP3,Post Office Protocol v3]' ]]),'hover'=>$stash->get(['locale',0,'maketext',['POP3 Mail Protocol' ]])}});$output .= "\n<style type=\"text/css\">\n\n.note_header {\n    font-weight: bold;\n}\n\n.caption {\n    font-weight: bold;\n}\n\na.secure {\n    font-weight: bold;\n    padding: 0 0.5em;\n}\n\na.insecure {\n    font-weight: normal;\n    padding: 0 0.5em;\n}\n\n.not-recommended {\n    font-weight: normal;\n}\n.child-note {\n    margin-left: 20px;\n}\n\n.escape-note {\n    font-style: italic;\n}\n\n.bottom-note {\n    font-style: italic;\n    margin-top: 5px;\n    margin-bottom: 5px;\n}\n\n.manual_settings_table {\n    table-layout: fixed;\n}\n\n.manual_settings_table tr td:first-child {\n    width: 120px;\n}\n\n.externalLink:after {\n    font-style: normal;\n    font-family: \"Font Awesome 5 Free\";\n    font-weight: 600;\n    content: \"\\f35d\";\n    display: inline-block;\n    padding: 0 3px 0 3px;\n    vertical-align: middle;\n}\n</style>\n\n";if (!$stash->get('from_archiving')){$output .= '
    ';$stash->set('page_heading',$stash->get(['locale',0,'maketext',['Set Up Mail Client for “[_1]”',$stash->get('account')]]));$output .= '
'}else {$output .= '
    ';$stash->set('page_heading',$stash->get(['locale',0,'maketext',['Set Up Mail Client Archive for “[_1]”',$stash->get('account')]]));$output .= '
'}$output .= '

';$stash->set('apponelabel',$stash->get(['apps',0,1,0,'label',0]));$output .= '
';if (!$stash->get('from_archiving')){$output .= '
<p id="descWhenYouAccess1" class="description">';$output .= $stash->get(['locale',0,'maketext',['When you access an email account through a desktop email application such as “[_1]”, the email application will require specific information about your email account. You can use the auto-configure options below to attempt to automatically configure your email application. If the available options are not compatible with your application, you will need to use the [output,strong,Manual Settings] information.',$stash->get(['apponelabel',0,'html',0])]]);$output .= '</p>
'}else {$output .= '
<p id="descWhenYouAccess2" class="description">';$output .= $stash->get(['locale',0,'maketext',['When you access an email archive through a desktop email application such as “[_1]”, the email application will require specific information about your email account. You can use the auto-configure options below to attempt to automatically configure your email application. If the available options are not compatible with your application, you will need to use the [output,strong,Manual Settings] information. We provide read-only access to your mail archives via IMAP only.',$stash->get(['apponelabel',0,'html',0])]]);$output .= '</p>
<div id="pw_notice" class="description-area"></div>
<script>
new CPANEL.widgets.Page_Notice( null, {
    container: "pw_notice",
    level: "info",
    content: "';$output .= $stash->get(['locale',0,'maketext',['Use your cPanel account password to read email archives via IMAP.' ]]);$output .= '"
} );
</script>
'}$output .= '


<script>
var saved_notice;
var success = function() {
    saved_notice = new CPANEL.ajax.Dynamic_Notice( {
        level: "success",
        container: "email_notice",
        content: "';$output .= $stash->get(['locale',0,'maketext',['Email sent.' ]]);$output .= '",
        replaces: saved_notice
    } );
};
function dispatch_client_config_email() {
        CPANEL.api( {
            module:   "Email",
            func:     "dispatch_client_settings",
            version: 3,
            data:     { \'to\': DOM.get(\'clientconfemail\').value, \'account\':';$output .= $stash->get(['account',0,'json',0]);$output .= ', \'block_on_send\': true},
            callback: CPANEL.ajax.build_callback( success, null, {
                on_error: function() { }
            } )
        } );
}
</script>

<div id="config_area" class="section">
    <h2 id="hdrAutoConfigurationScripts">';$output .= $stash->get(['locale',0,'maketext',['Mail Client Automatic Configuration Scripts' ]]);$output .= '</h2>

    <div id="auto_config_area">
        <p id="descAutoConfigArea" class="description">';$output .= $stash->get(['locale',0,'maketext',['Listed below are the available mail client automatic configuration scripts. Select the script for your mail client and operating system.' ]]);$output .= '</p>

        <script type="text/javascript">
            var app_keys = [];
            ';do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get('apps');unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR1: while (!$_tt_error){$stash->{'app'}=$_tt_value;$output .= '            app_keys.push(\'';$output .= $stash->get(['app',0,'key',0]);$output .= '\');
            ';;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};$output .= '
        </script>

      <div class="table-responsive">
        <table id="tblApplicationProtocols" class="table nonsortable">
        <thead>
            <tr>
                <th>';$output .= $stash->get(['locale',0,'maketext',['Application' ]]);$output .= '</th>
                <th>';$output .= $stash->get(['locale',0,'maketext',['Protocols' ]]);$output .= '</th>
            </td>
        </thead>
        <tbody>
        ';do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get('apps');unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR1: while (!$_tt_error){$stash->{'app'}=$_tt_value;$output .= '            <tr>
                <td class="app_name">
                    ';$output .= $stash->get(['app',0,'label',0,'html',0]);if ($stash->get(['app',0,'note',0])){$output .= '                    <a id="';$output .= $stash->get(['app',0,'key',0]);$output .= '_notes_control" href="javascript:void(0)"><img src="';$output .= $stash->get(['MagicRevision',['/images/info.png' ]]);$output .= '"></a>'}$output .= '                </td>
                <td class="links">';do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get('protocol_order');unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR2: while (!$_tt_error){$stash->{'protocol'}=$_tt_value;if (!$stash->get(['app',0,'urls',0,$stash->get('protocol'),0])){($_tt_value,$_tt_error)=$_tt_list->get_next();next FOR2}$stash->set('classname',$stash->get(['secure_protocols',0,$stash->get('protocol'),0])? 'secure' : 'insecure');$stash->set('secure',$stash->get(['secure_protocols',0,$stash->get('protocol'),0])? 'true' : 'false');if ($stash->get(['protocol',0,'index',['auto' ]])> -1){$output .= '                        <a class="';$output .= $stash->get('classname');$output .= '" href="javascript:void(0);" title="';$output .= $stash->get(['protocol_desc',0,$stash->get('protocol'),0,'hover',0]);$output .= '" onclick="show_mail_config_notices(this,\'';$output .= $stash->get(['app',0,'label',0]);$output .= '\', \'';$output .= $stash->get(['protocol_desc',0,$stash->get('protocol'),0,'label',0]);$output .= '\', ';$output .= $stash->get('secure');$output .= ', \'';$output .= $stash->get('protocol');$output .= '\'); return false;">';$output .= $stash->get(['protocol_desc',0,$stash->get('protocol'),0,'label',0]);$output .= '</a>'}else {$output .= '                        <a class="';$output .= $stash->get('classname');$output .= '" href="';$output .= $stash->get(['app',0,'urls',0,$stash->get('protocol'),0]);$output .= '" title="';$output .= $stash->get(['protocol_desc',0,$stash->get('protocol'),0,'hover',0]);$output .= '" onclick="show_mail_config_notices(this,\'';$output .= $stash->get(['app',0,'label',0]);$output .= '\', \'';$output .= $stash->get(['protocol_desc',0,$stash->get('protocol'),0,'label',0]);$output .= '\', ';$output .= $stash->get('secure');$output .= ', \'';$output .= $stash->get('protocol');$output .= '\'); return false;">';$output .= $stash->get(['protocol_desc',0,$stash->get('protocol'),0,'label',0]);$output .= '</a>'}$output .= '                    ';;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};$output .= '                </td>
            </tr>
            ';if ($stash->get(['app',0,'note',0])){$stash->set('isCurrentMacVersion',$stash->get('is_mac')&& $stash->get(['app',0,'open_if_mac',0])&& (($stash->get('is_at_least_lion')&& $stash->get(['app',0,'version',0])eq 10.7)|| (!$stash->get('is_at_least_lion')&& $stash->get(['app',0,'version',0])< 10.7)));$output .= '
            <tr id="';$output .= $stash->get(['app',0,'key',0]);$output .= '_notes_row" ';if (!($stash->get('isCurrentMacVersion'))){$output .= 'style="display: none"'}$output .= ' class="child-note-row">
                <td colspan="2">
                    <div class="child-note" id="';$output .= $stash->get(['app',0,'key',0]);$output .= '_note" ';if (!($stash->get('isCurrentMacVersion'))){$output .= 'style="display: none"'}$output .= '>';$output .= $stash->get(['app',0,'note',0]);$output .= '</div>
                </td>
            </tr>
            '}$output .= '
        ';;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};$output .= '        </tbody>
        </table>
      </div>
    </div>
    ';$output .= $context->process('mail/clientconf_manual_settings_include.html.tt');$output .= '
</div>

<div class="section">
    <h2 id="hdrAutoConfigurationScripts">';$output .= $stash->get(['locale',0,'maketext',['Email Instructions' ]]);$output .= '</h2>
    <div id="email_auto_config_area">
        <div id="email_notice" class="description-area"></div>
        <div id="descAutoConfigArea" class="description">';$output .= $stash->get(['locale',0,'maketext',['Send configuration information for “[_1]” to the following email address:',$stash->get(['account',0,'html',0])]]);$output .= '</div>
        <form class="form-inline" action="javascript:void(0)" onSubmit="dispatch_client_config_email();">
          <div class="form-group">
            <input id="clientconfemail" type="text" class="form-control" placeholder="Email">
          </div>
          <button type="submit" class="btn btn-default">';$output .= $stash->get(['locale',0,'maketext',['Send' ]]);$output .= '</button>
        </form>
    </div>
    <div style="clear:both;"></div>
</div>

<div class="section">
        <b id="Notes">';$output .= $stash->get(['locale',0,'maketext',['Notes:' ]]);$output .= '</b>
        <ul>
            <li id="NotesListItem1">';$output .= $stash->get(['locale',0,'maketext',['IMAP email access coordinates between the server and your mail application. Messages that have been read/deleted/replied to will show up as such, both on the server and in the mail application.' ]]);$output .= '</li>
            ';if (!$stash->get('from_archiving')){$output .= '
            <li id="NotesListItem2">';$output .= $stash->get(['locale',0,'maketext',['POP3 does not coordinate with the server. Messages marked as read/deleted/replied to in the mail application will not show up as such on the server. This means that future mail downloads with POP3 will show all messages as unread.' ]]);$output .= '</li>
            <li id="NotesListItem3">';$output .= $stash->get(['locale',0,'maketext',['Outgoing mail is sent using SMTP.' ]]);$output .= '</li>
            <li id="NotesListItem4">';$output .= $stash->get(['locale',0,'maketext',['We recommend using POP3 over SSL/TLS or IMAP over SSL/TLS since they provide increased security for your interactions with the remote mail server.' ]]);$output .= '</li>
            '}else {$output .= '
            <li id="NotesListItem5">';$output .= $stash->get(['locale',0,'maketext',['We recommend using IMAP over SSL/TLS since it provides increased security for your interactions with the remote mail server.' ]]);$output .= '</li>
            '}$output .= '
        </ul>
</div>

<script id="notices_body_template_secure" type="text/html">
    <p>';$output .= $stash->get(['locale',0,'maketext',['This will automatically configure “[_1]” with the correct settings for “[_2]”.','{app}','{protocol}' ]]);$output .= '</p>
    <ul>
        <li>';$output .= $stash->get(['locale',0,'maketext',['If you are prompted to open, run, or save this file, choose “Run” or “Open”.' ]]);$output .= '</li>
        <li>';$output .= $stash->get(['locale',0,'maketext',['If your computer asks if you would like to enter the information into the registry, choose “Yes”.' ]]);$output .= '</li>
        <li>';$output .= $stash->get(['locale',0,'maketext',['Use your email account password as the password.' ]]);$output .= '</li>
    </ul>
</script>

<script id="notices_body_template_clear" type="text/html">
    <p>';$output .= $stash->get(['locale',0,'maketext',['This will automatically configure “[_1]” with the correct settings for “[_2]”.','{app}','{protocol}' ]]);$output .= '</p>
    <ul>
        <li>';$output .= $stash->get(['locale',0,'maketext',['If you are prompted to open, run, or save this file, choose “Run” or “Open”.' ]]);$output .= '</li>
        <li>';$output .= $stash->get(['locale',0,'maketext',['If your computer asks if you would like to enter the information into the registry, choose “Yes”.' ]]);$output .= '</li>
        <li>';$output .= $stash->get(['locale',0,'maketext',['Use your email account password as the password.' ]]);$output .= '</li>
    </ul>
</script>

<script id="notices_body_template_autoconfig" type="text/html">
    <p>';$output .= $stash->get(['locale',0,'maketext',['Mail application “[_1]” can automatically detect this email account’s settings.','{app}' ]]);$output .= '</p>
    <ul>
        <li>';$output .= $stash->get(['locale',0,'maketext',['Choose to set up a new email account in “[_1]”.','{app}' ]]);$output .= '</li>
        <li>';$output .= $stash->get(['locale',0,'maketext',['When “[_1]” prompts you for the email address, enter “[_2]”.','{app}','<code style="word-wrap:break-word">{email}</code>' ]]);$output .= '</li>
        <li>';$output .= $stash->get(['locale',0,'maketext',['Use your email account password as the password.' ]]);$output .= '</li>
    </ul>
    <p>';$output .= $stash->get(['locale',0,'maketext',['If the auto-configuration fails, please set up the account using the manual settings.' ]]);$output .= '</p>
</script>

';$output .= $context->process('_assets/_ajaxapp_footer.html.tt');$output .= "\n<script>\nvar cpDOM = CPANEL.dom;\nvar EVENT = YAHOO.util.Event;\n\nfunction register_toggle_notes() {\n\n    for(var item in app_keys) {\n        var key = app_keys[item];\n        var note = DOM.get(key + \"_notes_control\");\n        if(!note)\n            continue;\n\n        var get_handler = function(key) {\n            return function() {\n                var noteKey = key;\n                var noteRowEl = DOM.get(noteKey + \"_notes_row\");\n                var noteEl = DOM.get(noteKey + \"_note\");\n                if(noteRowEl && noteEl) {\n                    if(cpDOM.isVisible(noteRowEl)) {\n                        var slide = CPANEL.animate.slide_up(noteEl);\n                        if (slide) {\n                            slide.onComplete.subscribe(function() {\n                                cpDOM.hide(noteRowEl);\n                            });\n                        }\n                    } else {\n                        cpDOM.show(noteRowEl);\n                        CPANEL.animate.slide_down(noteEl);\n                    }\n                }\n            }\n        }\n\n        EVENT.on(note, 'click', get_handler(key))\n    }\n\n}\n/**\n * Show the mail configuration pre-download notice box\n * for the specificed app and protocol.\n * \@name show_mail_config_notices\n * \@param {string} clicked\n * \@param {string} app\n * \@param {string} protocol\n * \@param {Boolean} secure\n * \@param {string} protocolkey\n */\nfunction show_mail_config_notices(clicked, app, protocol, secure, protocolkey) {\n    var url = clicked.href;\n\n    var dialog = new CPANEL.ajax.Common_Dialog( \"\", {\n        width: \"380px\"\n    });\n\n    dialog.setHeader(CPANEL.widgets.Dialog.applyDialogHeader(\"";$output .= $stash->get(['locale',0,'maketext',['Set Up Mail Client' ]]);$output .= '"));

    var template = "";
    if ( (protocolkey === "autodiscover") || (protocolkey === "autoconfig") ) {
        template = DOM.get("notices_body_template_autoconfig").text;
    } else if(secure) {
        template = DOM.get("notices_body_template_secure").text;
    }
    else {
        template = DOM.get("notices_body_template_clear").text;
    }

    var email = ';$output .= $stash->get(['CPANEL',0,'get_raw_form',['acct' ],'json',0])|| 'null';$output .= ";\n    if (!email || !/\@/.test(email)) {\n        email = \"_mainaccount\@";$output .= $stash->get(['CPANEL',0,'CPDATA',0,'DOMAIN',0]);$output .= "\";\n    }\n\n    dialog.setBody( YAHOO.lang.substitute( template, {\n        email: String(email).html_encode(),\n        app: app,\n        protocol: protocol\n    } ) );\n    dialog.beforeSubmitEvent.subscribe( function() {\n            dialog.hide_to_point(clicked);\n            if (protocolkey !== \"autodiscover\" && protocolkey !== \"autoconfig\") {\n                location.href = url;\n            }\n        return false;\n    } );\n    if (protocolkey === \"autodiscover\" || protocolkey === \"autoconfig\") {\n          dialog.cfg.getProperty(\"buttons\")[0].text = LOCALE.maketext('OK');\n          dialog.cfg.getProperty(\"buttons\").pop(); // removes cancel button\n    }\n    dialog.show_from_source(clicked);\n}\n\n/**\n * Initialize the page after the DOM is ready...\n * \@name initialize\n */\nfunction initialize() {\n    register_toggle_notes();\n}\n\nYAHOO.util.Event.onDOMReady(initialize);\n\n</script>\n"}};if ($@){$_tt_error=$context->catch($@,\$output);die$_tt_error unless$_tt_error->type eq 'return'}return$output},DEFBLOCKS=>{},});