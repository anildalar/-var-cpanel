Template::Document->new({METADATA=>{'name'=>'/usr/local/cpanel/whostmgr/docroot/templates/ansible_inventory.tmpl','modtime'=>'1728930269',},BLOCK=>sub {my$context=shift || die "template sub called without context\n";my$stash=$context->stash;my$output='';my$_tt_error;eval {BLOCK: {$output .= '[servers]
';do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get('nodes');unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR1: while (!$_tt_error){$stash->{'node'}=$_tt_value;if ($stash->get(['node',0,'role',0])eq 'server'){$output .= $stash->get(['node',0,'name',0]);$output .= ' ansible_host=';$output .= $stash->get(['node',0,'ip_address',0]);if ($stash->get(['node',0,'ssh_key',0])&& $stash->get(['node',0,'ssh_key',0])ne 'cpsc'){$output .= ' ansible_ssh_private_key_file=/root/.ssh/';$output .= $stash->get(['node',0,'ssh_key',0])}$output .= '
'};($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};$output .= '
[agents]
';do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get('nodes');unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR1: while (!$_tt_error){$stash->{'node'}=$_tt_value;if ($stash->get(['node',0,'role',0])eq 'agent'){$output .= $stash->get(['node',0,'name',0]);$output .= ' ansible_host=';$output .= $stash->get(['node',0,'ip_address',0]);if ($stash->get(['node',0,'ssh_key',0])&& $stash->get(['node',0,'ssh_key',0])ne 'cpsc'){$output .= ' ansible_ssh_private_key_file=/root/.ssh/';$output .= $stash->get(['node',0,'ssh_key',0])}$output .= '
'};($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};$output .= '
[all:vars]
ansible_ssh_private_key_file=/root/.ssh/cpsc
'}};if ($@){$_tt_error=$context->catch($@,\$output);die$_tt_error unless$_tt_error->type eq 'return'}return$output},DEFBLOCKS=>{},});