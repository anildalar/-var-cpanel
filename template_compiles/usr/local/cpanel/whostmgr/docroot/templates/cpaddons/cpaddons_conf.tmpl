Template::Document->new({METADATA=>{'modtime'=>'1728930269','name'=>'/usr/local/cpanel/whostmgr/docroot/templates/cpaddons/cpaddons_conf.tmpl',},BLOCK=>sub {my$context=shift || die "template sub called without context\n";my$stash=$context->stash;my$output='';my$_tt_error;eval {BLOCK: {$output .= '## This module is automatically generated

package cPAddonsConf;

our %inst = (

';do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get(['data',0,'config_definitions',0]);unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR1: while (!$_tt_error){$stash->{'kv'}=$_tt_value;$stash->set('module_name',$stash->get(['kv',0,'key',0]));$stash->set('addon_info',$stash->get(['kv',0,'value',0]));$output .= '    \'';$output .= $stash->get('module_name');$output .= '\' => {
        version          => \'';$output .= $stash->get(['addon_info',0,'version',0]);$output .= '\',
        VERSION          => \'';$output .= $stash->get(['addon_info',0,'VERSION',0]);$output .= '\',
        is_rpm           => \'';$output .= $stash->get(['addon_info',0,'is_rpm',0]);$output .= '\',
        display_app_name => \'';$output .= $stash->get(['addon_info',0,'display_app_name',0]);$output .= '\',
        desc             => \'';$output .= $stash->get(['addon_info',0,'desc',0]);$output .= '\',
        deprecated       => \'';$output .= $stash->get(['addon_info',0,'deprecated',0]);$output .= '\',
    },
';;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};$output .= '
);

our %vend = (

';do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get(['data',0,'ownvend',0]);unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR1: while (!$_tt_error){$stash->{'kv'}=$_tt_value;$stash->set('vendor',$stash->get(['kv',0,'key',0]));$stash->set('vendor_info',$stash->get(['kv',0,'value',0]));$output .= '    \'';$output .= $stash->get('vendor');$output .= '\' => {
        vndinf => \'';$output .= $stash->get(['vendor_info',0,'vndinf',0]);$output .= '\',
        cphost => \'';$output .= $stash->get(['vendor_info',0,'cphost',0]);$output .= '\',
        cphuri => \'';$output .= $stash->get(['vendor_info',0,'cphuri',0]);$output .= '\',
        palmd5 => \'';$output .= $stash->get(['vendor_info',0,'palmd5',0]);$output .= '\',
    },
';;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};$output .= '
);

1;
'}};if ($@){$_tt_error=$context->catch($@,\$output);die$_tt_error unless$_tt_error->type eq 'return'}return$output},DEFBLOCKS=>{},});