Template::Document->new({METADATA=>{'name'=>'/usr/local/cpanel/whostmgr/docroot/templates/host_access/hostaccess.tmpl','modtime'=>'1728930269',},BLOCK=>sub {my$context=shift || die "template sub called without context\n";my$stash=$context->stash;my$output='';my$_tt_error;eval {BLOCK: {$stash->set('JSON',$context->plugin('JSON'));$output .= $context->process('master_templates/_defheader.tmpl',{'theme'=>'yui','app_key'=>'host_access_control','stylesheets'=>[$stash->get(['MagicRevision',['/yui/autocomplete/assets/skins/sam/autocomplete.css' ]]),$stash->get(['MagicRevision',['../templates/host_access/hostaccess.css' ]])]});do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=['/yui/datasource/datasource.js','/yui/autocomplete/autocomplete.js' ];unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {LOOP: while (!$_tt_error){$stash->{'src'}=$_tt_value;$output .= $context->process('_loadjs.tmpl');;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};$output .= '
<p class="description">Host Access Control allows you to set up specific rules to allow or deny access to your server and services on it based on the IP address that is attempting to connect. It is general practice that denying all connections and only allowing connections that you wish to proceed is the most secure way to use Host Access Control.</p>

<p class="description">To set up a rule, you will need to add the service you wish to create the rule for, the IP address(es) you wish to allow or deny, and then the action to be taken (allow or deny).</p>

<p class="description">For example, you could set up the following rules to lock down your SSH service:</p>

<table class="example">
    <tr>
        <th>Daemon</th>
        <th>Access List</th>
        <td>&nbsp;</td>
        <th>Action</th>
        <td>&nbsp;</td>
        <th>Comment</th>
    </tr>
    <tr>
        <td>sshd</td>
        <td>192.168.0.0/255.255.255.0</td>
        <td>&nbsp;</td>
        <td>allow</td>
        <td>&nbsp;</td>
        <td>Allow local SSH access</td>
    </tr>
    <tr>
        <td>sshd</td>
        <td>198.66.254.254</td>
        <td>&nbsp;</td>
        <td>allow</td>
        <td>&nbsp;</td>
        <td>Allow SSH from my specific IP</td>
    </tr>
    <tr>
        <td>sshd</td>
        <td>ALL</td>
        <td>&nbsp;</td>
        <td>deny</td>
        <td>&nbsp;</td>
        <td>Deny access from all other IPs</td>
    </tr>
</table>

<p class="description">Note that the rules have an order of precedence. You need to place your allow rules before your deny rules if you are choosing to use the allow from a few, then deny from all technique.</p>

<p class="description">You can also use "ALL EXCEPT x.x.x.x" as an Access List which will allow all IP addresses except x.x.x.x (replace with a specific IP address).</p>

<form action="';$output .= $stash->get(['data',0,'action',0]);$output .= '" name="mainform" method="POST">
    <input type="hidden" id="eventlist_ctl" name="eventlist" value="" />
    <table width="100%" id="accesstable">
        <tr>
            <th width="20" nowrap>&nbsp;</th>
            <th width="20" nowrap>&nbsp;</th>
            <th width="100" nowrap>Daemon</th>
            <th width="150" nowrap>Access List</th>
            <th width="100%">Action</th>
            <th width="200" nowrap>Comment</th>
        </tr>
        <tbody>
        ';$stash->set('line_num',0);$stash->set('row_num',0);$stash->set('draglist',[]);$stash->set('emptyrules',[]);do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=[0..9 ];unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {LOOP: while (!$_tt_error){$stash->{'i'}=$_tt_value;$output .= $stash->get(['emptyrules',0,'push',[$stash->get(['data',0,'emptyrule',0])]]);;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get(['data',0,'rules',0,'merge',[$stash->get('emptyrules')]]);unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR1: while (!$_tt_error){$stash->{'rule'}=$_tt_value;$stash->set('line_num',$stash->get('line_num')+ 1);if ($stash->get(['rule',0,'type',0])eq 'comment'){($_tt_value,$_tt_error)=$_tt_list->get_next();next FOR1}$stash->set('row_num',$stash->get('row_num')+ 1);$stash->set('rowtype',($stash->get('row_num')% 2)? 'oddrow' : 'evenrow');$output .= '            <tr class="';$output .= $stash->get('rowtype');$output .= '" id="';$output .= $stash->get('line_num');$output .= '-move">
                <td width="20">
                    <div id="';$output .= $stash->get('line_num');$output .= '-mover" class="handle" style="position: relative; overflow:hidden; height:100%; width:100%; overflow: hidden; min-height:40px;">&nbsp;<br />&nbsp;<br />&nbsp;<br />&nbsp;</div>
                </td>
                <td valign="middle" class="acltd" width="20">
                    <img onClick="moveup(';$output .= $stash->get('line_num');$output .= '); this.src=\'/images/icon_arrow_up_disabled.gif\';" id="';$output .= $stash->get('line_num');$output .= '-moveup" src="/images/icon_arrow_up_disabled.gif" onmouseover="this.src=\'/images/icon_arrow_up.gif\';" onmouseout="this.src=\'/images/icon_arrow_up_disabled.gif\';" class="moveact"><br />
                    <img onClick="movedown(';$output .= $stash->get('line_num');$output .= '); this.src=\'/images/icon_arrow_down_disabled.gif\';" id="';$output .= $stash->get('line_num');$output .= '-movedown" src="/images/icon_arrow_down_disabled.gif"  onmouseover="this.src=\'/images/icon_arrow_down.gif\';" onmouseout="this.src=\'/images/icon_arrow_down_disabled.gif\';" class="moveact">
                </td>
                <td valign="middle" class="acltd" width="100" nowrap>
                    <div class="daemon_list autocautocomplete" id="';$output .= $stash->get('line_num');$output .= '-daemon_list-box"><input autocomplete="off" onfocus="autocomplete_init(this,';$output .= $stash->get('line_num');$output .= ');" class="autocinput" type="text" id="';$output .= $stash->get('line_num');$output .= '-daemon_list-in" name="';$output .= $stash->get('line_num');$output .= '-daemon_list" value="';$output .= do {my$output='';my$_tt_filter=$context->filter('html')|| $context->throw($context->error);$output .= $stash->get(['rule',0,'daemon_list',0,'join',[',' ]]);&$_tt_filter($output)};$output .= '" />
                        <div id="';$output .= $stash->get('line_num');$output .= '-daemon_list-con" class="autoccontainer"></div>
                    </div>
                </td>
                <td valign="middle" class="acltd" with="150" nowrap>
                    <div class="client_list autocautocomplete" id="';$output .= $stash->get('line_num');$output .= '-client_list-box"><input autocomplete="off" onfocus="autocomplete_init(this,';$output .= $stash->get('line_num');$output .= ');" class="autocinput" type="text" id="';$output .= $stash->get('line_num');$output .= '-client_list-in" name="';$output .= $stash->get('line_num');$output .= '-client_list" value="';$output .= do {my$output='';my$_tt_filter=$context->filter('html')|| $context->throw($context->error);$output .= $stash->get(['rule',0,'client_list',0,'join',[',' ]]);&$_tt_filter($output)};$output .= '" />
                        <div id="';$output .= $stash->get('line_num');$output .= '-client_list-con" class="autoccontainer"></div>
                    </div>
                </td>
                <td valign="middle" class="acltd"  width="100%">
                    <div class="action_maker" id="';$output .= $stash->get('line_num');$output .= '-action_maker">
                    ';do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get(['rule',0,'action_list',0,'merge',[['' ]]]);unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR2: while (!$_tt_error){$stash->{'action'}=$_tt_value;$output .= '                        <div class="action autocautocomplete"
                             id="';$output .= $stash->get('line_num');$output .= '-action-box_';$output .= $stash->get(['loop',0,'index',0]);$output .= '">
                            <input autocomplete="off" onfocus="autocomplete_init(this,';$output .= $stash->get('line_num');$output .= ',';$output .= $stash->get(['loop',0,'index',0]);$output .= ');" class="actioninput';$output .= $stash->get('rowtype');$output .= '" type="text" id="';$output .= $stash->get('line_num');$output .= '-action-in_';$output .= $stash->get(['loop',0,'index',0]);$output .= '" name="';$output .= $stash->get('line_num');$output .= '-action_';$output .= $stash->get(['loop',0,'index',0]);$output .= '" value="';$output .= do {my$output='';my$_tt_filter=$context->filter('html')|| $context->throw($context->error);$output .= $stash->get('action');&$_tt_filter($output)};$output .= '" onblur="actionmkr(this.id)" onchange="actionmkr(this.id)" />
                            <div id="';$output .= $stash->get('line_num');$output .= '-action-con_';$output .= $stash->get(['loop',0,'index',0]);$output .= '" class="autoccontainer"></div>
                        </div>
                    ';;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};$output .= '                    </div>
                </td>
                <td valign="middle" class="acltd"  width="200" nowrap>
                    <div class="comment autocautocomplete" id="';$output .= $stash->get('line_num');$output .= '-comment-box"><input autocomplete="off" onfocus="autocomplete_init(this,';$output .= $stash->get('line_num');$output .= ');" class="autocinput" type="text" id="';$output .= $stash->get('line_num');$output .= '-comment-in" name="';$output .= $stash->get('line_num');$output .= '-comment" value="';$output .= do {my$output='';my$_tt_filter=$context->filter('html')|| $context->throw($context->error);$output .= $stash->get(['rule',0,'comment',0]);&$_tt_filter($output)};$output .= '" />
                        <div id="';$output .= $stash->get('line_num');$output .= '-comment-con" class="autoccontainer"></div>
                    </div>
                </td>
            </tr>
            ';$output .= $stash->get(['draglist',0,'push',[$stash->get('line_num')]]);$output .= '        ';;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};$output .= '        </tbody>
    </table>

    <div class="controls">
        <input type="hidden" name="save_accesslist" value="1" />
        <input type="submit" class="btn-primary" value="Save Host Access List" id="btn-save" />
        <a href="';$output .= $stash->get(['data',0,'action',0]);$output .= '" id="btn-reload">[ Reload ]</a>
    </div>

</form>

<script>
var draglist = ';$output .= $stash->get(['draglist',0,'json',0]);$output .= ';
var services_obj = ';$output .= $stash->get(['data',0,'services',0,'json',0])|| 'null';$output .= ';
var actions_obj = ';$output .= $stash->get(['data',0,'actions',0,'json',0])|| 'null';$output .= ';
var wildcards = ';$output .= $stash->get(['data',0,'wildcards',0,'json',0])|| 'null';$output .= ";\n\nvar services = CPANEL.util.keys(services_obj).map( function(k) { if ( k === 'mysql' ) { return; } return [k, services_obj[k]] } );\nvar actions = CPANEL.util.keys(actions_obj).map( function(k) { return [k, actions_obj[k]] } );\n\n\nvar init_list = new Object;\nvar eventlist = new Array;\nvar thisZ = 9000;\n\nvar oSERVICES = new YAHOO.widget.DS_JSArray(services);\nvar oACTIONS = new YAHOO.widget.DS_JSArray(actions);\nvar oWILDCARDS = new YAHOO.widget.DS_JSArray(wildcards);\n\n/* this function is public domain */\nString.prototype.wordWrap = function(m, b, c){\n    var i, j, s, r = this.split(\"\\n\");\n    if(m > 0) for(i in r){\n        for(s = r[i], r[i] = \"\"; s.length > m;\n                j = c ? m : (j = s.substr(0, m).match(/\\S*\$/)).input.length - j[0].length\n                || m,\n                r[i] += s.substr(0, j) + ((s = s.substr(j)).length ? b : \"\")\n            );\n        r[i] += s;\n    }\n    return r.join(\"\\n\");\n};\nfunction openevent (oSelf) {\n    thisZ++;\n    if (this._oContainer) {this._oContainer.parentNode.style.zIndex = thisZ;}\n}\nfunction killevent (oSelf) {\n    thisZ--;\n    if (this.oContainer) {this._oContainer.parentNode.style.zIndex = 9000;}\n}\n\nfunction initac (iba,ibb,ilist,ishash) {\n    var oAC = new YAHOO.widget.AutoComplete(iba,ibb,ilist);\n    oAC.useIFrame = true;\n    oAC.containerExpandEvent.subscribe(openevent);\n    oAC.containerCollapseEvent.subscribe(killevent);\n    oAC.doBeforeExpandContainer = function(oTextbox, oContainer, sQuery, aResults) {\n        var pos = YAHOO.util.Dom.getXY(oTextbox);\n        pos[1] += YAHOO.util.Dom.get(oTextbox).offsetHeight;\n        YAHOO.util.Dom.setXY(oContainer,pos);\n        return true;\n    };\n    oAC.queryDelay=0;\n    oAC.minQueryLength=0;\n    oAC.typeAhead=false;\n    oAC.useShadow=true;\n    oAC.prehighlightClassName = \"yui-ac-prehighlight\";\n    if (ishash) {\n        oAC.formatResult = function(oResultItem, sQuery) {\n            var sMarkup = '<b>' + oResultItem[0] + \"</b> (\" + oResultItem[1] + \")\";\n            return sMarkup.wordWrap((iba.match(/daemon/) ? 21 : 28),\"<br />\",false);\n        };\n    }\n}\n\nfunction actionmkr(ablockid) {\n    var ablock=ablockid.split('-');\n    var aid = ablock[0];\n    var actionconid = aid + '-action_maker';\n    var actioncon = document.getElementById(actionconid);\n    var actionlist = actioncon.children;\n    var blankcount = 0;\n    var usedcount = 0;\n    var actioncount = actionlist.length;\n    for(var i=0;i<actioncount;i++) {\n        var thisactionid = actionlist[i].id;\n        var thisactionblock = thisactionid.split('_');\n        var actionum = thisactionblock[1];\n        var actioninputid = aid + '-action-in_' + actionum;\n        var actioninput = document.getElementById(actioninputid);\n        if (actioninput.value == \"\") {\n            blankcount++;\n        } else {\n            usedcount++;\n        }\n    }\n    if (blankcount > 1) {\n        for(var i=1;i<actioncount; i++) {\n            var thisactionid = actionlist[i].id;\n            var thisactionblock = thisactionid.split('_');\n            var actionum = thisactionblock[1];\n            var actioninputid = aid + '-action-in_' + actionum;\n            var actioninput = document.getElementById(actioninputid);\n            if (actioninput.value == \"\") {\n                actioncon.removeChild(actionlist[i]);\n                blankcount--;\n            }\n            if (blankcount <= 1) { break; }\n        }\n        return;\n    }\n\n    if (blankcount < 1) {\n        var newact = usedcount;\n        var newdiv = document.createElement('div');\n        newdiv.id = aid + '-action-box_' + newact;\n        newdiv.className = \"action autocautocomplete\";\n        var nclass='actioninputevenrow';\n        if (aid % 2 != 0) { nclass='actioninputoddrow'; }\n        newdiv.innerHTML = '<input class=\"' + nclass + '\" type=\"text\" id=\"' + aid + '-action-in_' + newact + '\" name=\"' + aid + '-action_' + newact + '\" value=\"\" onBlur=\"actionmkr(this.id);\"; onChange=\"actionmkr(this.id);\" /><div id=\"' + aid + '-action-con_' + newact + '\" class=\"autoccontainer\"></div>';\n        actioncon.appendChild(newdiv);\n        initac(aid + '-action-in_' + newact,aid + '-action-con_' + newact,oACTIONS,1);\n        var newInputField = document.getElementById(aid + '-action-in_' + newact);\n        if (newInputField) {\n            newInputField.focus();\n        }\n    }\n}\n\nfunction autocomplete_init(myele,linenum,az) {\n    if (myele.onfocus) myele.onfocus='';\n\n    if (az) {\n        initac(linenum + '-action-in_'+az,linenum + '-action-con_'+az,oACTIONS,1);\n    }\n    else {\n        if (init_list[linenum]) return;\n\n        init_list[linenum] = 1;\n        var daemon_ac = initac(linenum + '-daemon_list-in',linenum + '-daemon_list-con',oSERVICES,1);\n        var client_ac = initac(linenum + '-client_list-in',linenum + '-client_list-con',oWILDCARDS);\n        var action_ac = initac(linenum + '-action-in_0',linenum + '-action-con_0',oACTIONS,1);\n        actionmkr(linenum + '-action-in_0');\n    }\n\n    //re-focus so the autocomplete behavior will begin immediately\n    if ( 'dispatchEvent' in myele ) {\n        var focus_event = document.createEvent('UIEvents');\n        focus_event.initUIEvent('focus',false,false,window,1);\n        myele.dispatchEvent(focus_event);\n    }\n    else if ( 'fireEvent' in myele ) {  //IE <9\n        myele.fireEvent('onfocus');\n    }\n}\n\nfunction getScrollPos() {\n    return (typeof document.body.scrollTop != 'undefined') ?\n        document.body.scrollTop :\n        (typeof window.pageYOffset != 'undefined') ?\n        window.pageYOffset : 0;\n}\n\nfunction init_drag() {\n    YAHOO.util.DDM.mode = 0;\n    var directions = ['','r'];\n    for(var i=0;i<draglist.length;i++) {\n        for(var j=0;j<directions.length;j++) {\n        var dragid = draglist[i] + '-move' + directions[j];\n\n        var dd;\n        if (directions[j] == '') {\n            dd = new YAHOO.util.DDTarget(dragid);\n        } else {\n            dd = new YAHOO.util.DDProxy(dragid);\n            dd.setXConstraint(0, 0);\n        }\n        dd.onMouseUp = function (e,id) {\n            var draggedEl = this.getEl();\n            draggedEl.style.top=0+'px';\n            draggedEl.style.left=0+'px';\n            return true;\n        }\n        dd.onDragDrop=function (e, id) {\n            var draggedEl = this.getEl();\n            var targetedEl = document.getElementById(id);\n            removeDragClass(id);\n\n            var txy = YAHOO.util.Dom.getXY(targetedEl);\n            var pY = getScrollPos();\n            var ty = (e.clientY + pY);\n\n            var midpt = txy[1]+(targetedEl.offsetHeight/2);\n\n            var targetRowId=getrowidFromId(targetedEl.id);\n            var draggedRowId=getrowidFromId(draggedEl.id);\n\n            if (ty > midpt) {\n                    moverow(draggedRowId,findRowOffset(draggedRowId,targetRowId));\n            } else {\n                    moverow(draggedRowId,findRowOffset(draggedRowId,targetRowId)-1);\n            }\n            draggedEl.style.top=0+'px';\n            draggedEl.style.left=0+'px';\n            return true;\n\n        };\n        dd.onDragEnter=function (e, id) {\n            addDragClass(id);\n        };\n        dd.onDragOut=function (e, id) {\n            removeDragClass(id);\n        };\n        }\n    }\n}\n\nfunction getrowidFromId(id) {\n    var elist = id.split('-');\n    return elist[0];\n}\n\nfunction addDragClass(id) {\n    var tid = document.getElementById(getrowidFromId(id)+'-move');\n    var classes = classToArr(tid);\n    classes.push('dragin');\n    tid.className = classes.join(\" \");\n}\n\nfunction removeDragClass(id) {\n    var tid = document.getElementById(getrowidFromId(id)+'-move');\n    var classes = classToArr(tid);\n    var newclasses = striparr(classes,'dragin');\n    tid.className = newclasses.join(\" \");\n}\n\nfunction striparr(arr,ele) {\n    var newarr = new Array;\n    for(var i = 0;i < arr.length;i++) {\n        if (arr[i] != ele) {\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr;\n}\n\nfunction classToArr(ele) {\n    var classes = ele.className.split(\" \");\n    return classes;\n}\n\nfunction reordernodes(os,ns) {\n    var oldnodes = new Object;\n    for(var i=0;i<os.length;i++) {\n        var oele = document.getElementById(os[i]);\n        oldnodes[os[i]] = oele;\n        containerObj.removeChild(oele);\n    }\n\n    for(var i=0;i<ns.length;i++) {\n        var nele = oldnodes[ns[i]];\n        containerObj.appendChild(nele);\n    }\n}\n\nfunction moveup(tid) {\n        moverow(tid,-1);\n}\nfunction movedown(tid) {\n        moverow(tid,1);\n}\n\nfunction moverow(tid,offset) {\n    var accesstable = document.getElementById('accesstable');\n    var trlist = accesstable.getElementsByTagName('tr');\n    var lastid = null;\n    for(var i=1;i < trlist.length;i++) {\n        var thisid = getrowidFromId(trlist[i].id);\n\n        if (thisid == tid) {\n            var targetoffset = (i+parseInt(offset));\n            if (targetoffset > trlist.length || trlist[targetoffset] == null || (targetoffset) == 0) { return true; }\n            var thisParent = trlist[i].parentNode;\n            var tmpchld = trlist[i];\n            thisParent.removeChild(trlist[i]);\n            thisParent.insertBefore(tmpchld,trlist[targetoffset]);\n\n            eventlist.push(thisid + ',' + offset);\n            document.getElementById('eventlist_ctl').value=eventlist.join(':');\n            break;\n        }\n    }\n\n    var rc=0;\n    for(var i=1;i < trlist.length;i++) {\n        rc++;\n        if (rc % 2 == 0) {\n            trlist[i].className=\"evenrow\";\n        }\n        else {\n            trlist[i].className=\"oddrow\";\n        }\n    }\n}\n\nfunction findRowOffset (d,t) {\n    var accesstable = document.getElementById('accesstable');\n    var trlist = accesstable.getElementsByTagName('tr');\n    var doffset;\n    var toffset;\n    for(var i=1;i < trlist.length;i++) {\n        var thisid = getrowidFromId(trlist[i].id);\n        if (thisid == d) {\n            doffset=i;\n        } else if (thisid == t) {\n            toffset=i;\n        }\n        if (doffset && toffset) { break; }\n    }\n    return (toffset - doffset);\n}\n\nYAHOO.util.Event.addListener(window, \"load\", init_drag);\n</script>\n\n";$output .= $context->process('master_templates/_deffooter.tmpl',{'theme'=>'yui' });$output .= '
'}};if ($@){$_tt_error=$context->catch($@,\$output);die$_tt_error unless$_tt_error->type eq 'return'}return$output},DEFBLOCKS=>{},});