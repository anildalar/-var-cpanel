Template::Document->new({METADATA=>{'name'=>'/usr/local/cpanel/whostmgr/docroot/templates/host_access/nftables_access.tmpl','modtime'=>'1728930269',},BLOCK=>sub {my$context=shift || die "template sub called without context\n";my$stash=$context->stash;my$output='';my$_tt_error;eval {BLOCK: {$output .= $context->process('master_templates/_defheader.tmpl',{'theme'=>'bootstrap','app_key'=>'host_access_control' });$output .= "<!--XXX Hack to fix page presentation, as neither LTR or RTL are set with bootstrap theme. Oops-->\n<script type=\"text/javascript\">\n	document.getElementsByTagName('html')[0].dir = \"ltr\";\n</script>\n<style>\n	.spinner {\n	  animation-name: spinner;\n	  animation-duration: 1000ms;\n	  animation-iteration-count: infinite;\n	  animation-timing-function: linear;\n	}\n\n	\@keyframes spinner {\n		from {transform:rotate(0deg);}\n		to {transform:rotate(360deg);}\n	}\n</style>\n<p>\n	Host Access Control allows you to set up specific rules to accept, reject\n    or drop access to your\n	server on various ports based on the IP address that is attempting to connect.\n	Denying all connections and only allowing connections that\n	you wish to allow is the most secure way to use Host Access Control.\n</p>\n\n<p>\n	To set up a rule,\n    add the ports you wish to create the rule for,\n    the IP addresses for which the rule will apply to,\n    and the action the system should take (ACCEPT, DROP, or REJECT).\n</p>\n\n<button id=\"showHideExample\" class=\"btn btn-default\">Show/Hide Example</button><br><br>\n<div id=\"exampleDiv\" style=\"display: none;\" class=\"well\">\n    <table class=\"table table-striped\">\n        <tr>\n            <th>Port</th>\n            <th>IP Address/CIDR</th>\n			<th>Protocol</th>\n            <th>Action</th>\n        </tr>\n        <tr>\n			<td>22</td>\n            <td>192.168.0.0</td>\n			<td>TCP</td>\n            <td>ACCEPT</td>\n        </tr>\n        <tr>\n			<td>22</td>\n            <td>198.66.254.1/24</td>\n			<td>TCP</td>\n            <td>ACCEPT</td>\n        </tr>\n        <tr>\n			<td>22</td>\n            <td>ALL</td>\n			<td>TCP</td>\n            <td>REJECT</td>\n        </tr>\n    </table>\n</div>\n\n<p class=\"alert alert-info\">\n	<strong>Note:</strong> Rules have an order of precedence.\n	You need to place your ACCEPT rules before your deny (REJECT or DROP) rules.\n	<br><br>\n    This list allows all IP addresses to access the port except for the IP\n    address range that you specify.\n</p>\n<h3>Add Rule</h3>\n<form name=\"addform\" action=\"hostaccess.cgi\" method=\"POST\">\n	<input type=\"hidden\" name=\"add_nftables_rule\" value=\"1\"></input>\n	<table id=\"addRuleTbl\" class=\"table table striped\">\n		<thead>\n			<tr>\n				<th>Port</th>\n				<th>IP Address/CIDR</th>\n				<th>Protocol</th>\n				<th>Action</th>\n			</tr>\n		</thead>\n		<tbody>\n			<tr>\n				<td><input required id=\"addPort\" name=\"port\" type=\"number\" placeholder=\"1234\" min=\"1\" max=\"65535\"></input></td>\n				<td><input id=\"addIp\" name=\"ip\" type=\"text\" placeholder=\"123.12.1.123\"></input></td>\n				<td>\n					<select name=\"protocol\" id=\"addProtocol\">\n						<option value=\"tcp\" default>TCP</option>\n						<option value=\"udp\">UDP</option>\n					</select>\n				</td>\n				<td>\n					<select name=\"action\" id=\"addAction\">\n						<option value=\"reject\" default>REJECT</option>\n						<option value=\"drop\">DROP</option>\n						<option value=\"accept\">ACCEPT</option>\n					</select>\n				</td>\n			</tr>\n		</tbody>\n	</table>\n	<button id=\"addSubmit\" class=\"btn btn-success\">Add Rule</button>\n</form>\n<h3>Current Rules</h3>\n<table id=\"ruleTbl\" class=\"table table-striped\">\n	<thead>\n		<tr>\n			<th>Handle</th>\n			<th>Port</th>\n			<th>IP Address/CIDR</th>\n			<th>Protocol</th>\n			<th>Action</th>\n			<th>Delete?</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr><td colspan=5>Loading... <span class=\"glyphicon glyphicon-cog spinner\"></span></td></tr>\n	</tbody>\n</table>\n<div class=\"controls\">\n	<a id=\"reloadRules\" href=\"hostaccess.cgi\" class=\"btn btn-default\" id=\"btn-reload\">Reload</a>\n</div>\n<script type=\"text/javascript\">\n	document.getElementById(\"showHideExample\").addEventListener(\"click\", function () {\n		let elem = document.getElementById(\"exampleDiv\");\n		let mode = ( elem.style.display === \"none\" ) ? \"block\" : \"none\";\n		elem.style.display = mode;\n	});\n\n	// I've done this pattern many times.\n	// May not be the prettiest, but it's easy. - TAB\n	function selfRequest (method, handler, errorHandler, args) {\n		'use strict';\n		let oReq = new XMLHttpRequest();\n		oReq.onreadystatechange = function() {\n			if (this.readyState === XMLHttpRequest.DONE) {\n				if( this.status === 200 ) {\n					handler(this.responseText);\n				} else {\n					errorHandler(method, this.status, this.responseText);\n				}\n			}\n		}\n		let argarr = [];\n		if( typeof args === 'object' ) {\n			Object.keys(args).forEach( function(argument) {\n				argarr.push(`\${argument}=\${args[argument]}`);\n			});\n		}\n		let argstr = argarr.join(\"&\");\n\n		if( method === 'GET' ) {\n			oReq.open( method, `hostaccess.cgi?\${argstr}`, true );\n			oReq.send();\n		} else if ( method === 'POST' ) {\n			oReq.open( method, \"hostaccess.cgi\", true );\n			oReq.setRequestHeader( \"Content-type\", \"application/x-www-form-urlencoded\" );\n			oReq.send(argstr);\n		}\n		return false;\n	}\n\n	function populateTbl(blob) {\n		let tbody = document.querySelector(\"table#ruleTbl > tbody\");\n		let content = '';\n		JSON.parse(blob).forEach(function(elem) {\n\n			// Not sure yet how to represent IN or OUT bound traffic distinction.\n			if(elem.chain !== 'cPanel-HostAccessControl') {\n				return;\n			}\n\n			// OK, we're looking for match left along with reject or accept.\n			content += `<tr id='handle_\${elem.handle}'>`;\n			content += `<td>\${elem.handle}</td>`;\n			let rule = {};\n            rule.ip = 'ALL';\n			elem.expr.forEach(function(expr) {\n				if(expr.hasOwnProperty('reject') ) {\n					rule.action = 'REJECT';\n					return;\n				}\n				if(expr.hasOwnProperty('accept') ) {\n					rule.action = 'ACCEPT';\n					return;\n				}\n				if(expr.hasOwnProperty('drop') ) {\n					rule.action = 'DROP';\n					return;\n				}\n				if( expr.hasOwnProperty('match') && expr.match.op === '==' ) {\n					if( expr.match.left.payload.field === \"saddr\" ) {\n						if( typeof expr.match.right === 'object' ) {\n                            if(expr.match.right.hasOwnProperty('prefix')) {\n                                rule.ip = expr.match.right.prefix.addr + '/' + expr.match.right.prefix.len;\n                            } else if(expr.match.right.hasOwnProperty('range')) {\n							    rule.ip = expr.match.right.range.join(\"-\");\n                            }\n						}\n						else {\n							rule.ip = expr.match.right;\n						}\n					}\n					else if ( expr.match.left.payload.field === \"dport\" ) {\n						rule.port     = expr.match.right;\n						rule.protocol = expr.match.left.payload.protocol;\n					}\n					return;\n				}\n				return;\n			});\n			content += `<td>\${rule.port}</td>`; // port\n			content += `<td>\${rule.ip}</td>`; // IP Address/CIDR\n			content += `<td>\${rule.protocol}</td>`; // protocol\n			content += `<td>\${rule.action}</td>`; // action\n			content += `<td><form id=\"delete_\${elem.handle}\" name=\"delete_\${elem.handle}\" action=\"hostaccess.cgi\" method=\"POST\">`;\n			content += `<input type=\"hidden\" name=\"chain\" value=\"\${elem.chain}\"></input>`;\n			content += `<input type=\"hidden\" name=\"delete_nftables_rule\" value=\"\${elem.handle}\"></input>`;\n			content += '<button class=\"btn btn-link\"><span class=\"glyphicon glyphicon-trash\"></span></button></form></td>';\n			content += '</tr>';\n		});\n		if(content === '') {\n			content = '<tr><td colspan=5>No host access rules currently exist.</td></tr>';\n		}\n		tbody.innerHTML = content;\n		return false;\n	}\n\n    // Numeric validator already good to go\n    function register_validators() {\n        let ip        = document.querySelector('#addRuleTbl input[name=ip]');\n        let reggiev4  = '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))?\$';\n        let reggiev6  = '^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?\$'\n        let validators = [ new RegExp( reggiev4, \"\"), new RegExp( reggiev6, \"\" ) ];\n        let msg = \"IP addresses must be a valid v4 or v6 address\";\n        let validatorFn = function() {\n            if(ip.value === 'ALL' ) {\n                ip.setCustomValidity(\"\");\n                return;\n            }\n            validators.some(function (validator) {\n                if (validator.test(ip.value)) {\n                    ip.setCustomValidity(\"\");\n                    return true;\n                } else {\n                    ip.setCustomValidity(msg);\n                }\n            });\n        }\n\n        ip.addEventListener( 'keyup', validatorFn );\n        validatorFn();\n    }\n\n	function genericErr(method, stat, message) {\n		alert(`\${method} hostaccess.cgi: \${stat} \${message}`);\n	}\n\n	document.addEventListener('DOMContentLoaded', function(event) {\n    	selfRequest( \"GET\", populateTbl, genericErr, { 'fetch_nftables_rules': 1, 'no_cache': ";$output .= $stash->get(['data',0,'no_cache',0]);$output .= ' } );
        register_validators();
        return;
	});
</script>
';$output .= $context->process('master_templates/_deffooter.tmpl',{'theme'=>'bootstrap' });$output .= '
'}};if ($@){$_tt_error=$context->catch($@,\$output);die$_tt_error unless$_tt_error->type eq 'return'}return$output},DEFBLOCKS=>{},});