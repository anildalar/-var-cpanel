Template::Document->new({METADATA=>{'name'=>'/usr/local/cpanel/whostmgr/docroot/templates/saveedits.tmpl','modtime'=>'1728930269',},BLOCK=>sub {my$context=shift || die "template sub called without context\n";my$stash=$context->stash;my$output='';my$_tt_error;eval {BLOCK: {$stash->set('Whostmgr',$context->plugin('Whostmgr'));$output .= do {my$output='';$output .= '
';if ($stash->get(['data',0,'exists',['reseller_ns_success' ]])){if ($stash->get(['data',0,'reseller_ns_success',0])){$output .= '<p>';if ($stash->get(['data',0,'reseller_ns_reset_to_root',0])){$output .= $stash->get(['locale',0,'maketext',['Your account’s nameservers inherit [asis,root]‘s nameservers.' ]])}else {$stash->set('real_nameservers',$stash->get(['data',0,'reseller_nameservers',0,'grep',['.' ]]));$output .= $stash->get(['locale',0,'maketext',['Your account’s nameservers have been set to [list_and,_1].',$stash->get('real_nameservers')]])}$output .= '</p>'}else {$output .= '<p>';$output .= $stash->get(['locale',0,'maketext',['Your account’s nameservers were not updated: [_1]',$stash->get(['data',0,'reseller_ns_message',0])]]);$output .= '</p>'}}elsif ($stash->get(['data',0,'invalid_reseller_ns',0])){$output .= '<p>';$output .= $stash->get(['locale',0,'maketext',['“[_1]” submitted reseller [numerate,_1,nameserver is,nameservers are] invalid: [list_and,_2].',$stash->get(['data',0,'invalid_reseller_ns',0,'values',0,'size',0]),$stash->get(['data',0,'invalid_reseller_ns',0,'values',0,'sort',0])]]);$output .= '<br />';$output .= $stash->get(['locale',0,'maketext',['Your account’s nameservers are not updated.' ]]);$output .= '</p>'}if ($stash->get(['data',0,'exists',['changed_settings' ]])){do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get(['data',0,'invalid',0,'keys',0,'sort',0]);unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR1: while (!$_tt_error){$stash->{'key'}=$_tt_value;$stash->set('setting_label',$stash->get(['ts_texts',0,$stash->get('key'),0,'label',0]));$stash->set('value_text',$stash->get(['data',0,'invalid',0,'defined',[$stash->get('key')]])? ('&ldquo;' .$stash->get(['data',0,'invalid',0,$stash->get('key'),0]).'&rdquo;'): 'undefined');$stash->set('reason',$stash->get(['data',0,'invalid_reasons',0,'defined',[$stash->get('key')]])? ' (' .$stash->get(['data',0,'invalid_reasons',0,$stash->get('key'),0]).')' : '');$output .= ('<p><b>Invalid ' .$stash->get('setting_label').' value: ' .$stash->get('value_text').$stash->get('reason').'. This setting will not be updated.</b></p>');;($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error};do {my ($_tt_value,$_tt_error,$_tt_oldloop);my$_tt_list=$stash->get(['data',0,'changed_settings',0,'keys',0,'sort',0]);unless (UNIVERSAL::isa($_tt_list,'Template::Iterator')){$_tt_list=Template::Config->iterator($_tt_list)|| die$Template::Config::ERROR,"\n"}($_tt_value,$_tt_error)=$_tt_list->get_first();eval {$_tt_oldloop=$stash->get('loop')};$stash->set('loop',$_tt_list);eval {FOR1: while (!$_tt_error){$stash->{'key'}=$_tt_value;$stash->set('setting_undef',$stash->get(['ts_conf',0,$stash->get('key'),0,'can_disable',0])&& $stash->get(['ts_texts',0,$stash->get('key'),0,'undef',0]));$stash->set('setting_label',$stash->get(['ts_texts',0,$stash->get('key'),0,'label',0]));$stash->set('optionlabels',$stash->get(['ts_texts',0,$stash->get('key'),0,'optionlabels',0]));$stash->set('oldvalue',$stash->get(['data',0,'changed_settings',0,$stash->get('key'),0,0,0]));$stash->set('newvalue',$stash->get(['data',0,'changed_settings',0,$stash->get('key'),0,1,0]));if ($stash->get('optionlabels')&& $stash->get(['optionlabels',0,'defined',[$stash->get('oldvalue')]])){$stash->set('oldvalue_text',$stash->get(['optionlabels',0,$stash->get('oldvalue'),0]))}else {$stash->set('oldvalue_text',$stash->get(['oldvalue',0,'defined',0])? ('&ldquo;' .$stash->get('oldvalue').'&rdquo;'): $stash->get('setting_undef'))}if ($stash->get('optionlabels')&& $stash->get(['optionlabels',0,'defined',[$stash->get('newvalue')]])){$stash->set('newvalue_text',$stash->get(['optionlabels',0,$stash->get('newvalue'),0]))}else {$stash->set('newvalue_text',$stash->get(['newvalue',0,'defined',0])? ('&ldquo;' .$stash->get('newvalue').'&rdquo;'): $stash->get('setting_undef'))}if ($stash->get(['ts_conf',0,$stash->get('key'),0,'type',0])eq 'password'){$output .= ('<p>Modifying &ldquo;' .$stash->get('setting_label').'&rdquo;.</p>')}else {$output .= ('<p>Modifying &ldquo;' .$stash->get('setting_label').'&rdquo; from ' .$stash->get('oldvalue_text').' to ' .$stash->get('newvalue_text').'.</p>')};($_tt_value,$_tt_error)=$_tt_list->get_next()}};$stash->set('loop',$_tt_oldloop);die $@ if $@;$_tt_error=0 if$_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;die$_tt_error if$_tt_error}}$output .= '
<br />
';$output .= $stash->get(['locale',0,'maketext',['This system has [quant,_1,free IP,free IPs,no free IPs].',$stash->get(['data',0,'freeips',0])]]);$output .= '
';if ($stash->get(['data',0,'enable_named',0])){$output .= '
<br />
<br />
<div class="';if ($stash->get(['data',0,'enable_named',0,0,0])){$output .= 'ok'}else {$output .= 'error'}$output .= 'msg">';$output .= $stash->get(['data',0,'enable_named',0,1,0]);$output .= '</div>'}$output .= '

';$context->include('master_templates/master.tmpl',{'theme'=>'yui','breadcrumburl'=>'/scripts/editsets','content',$output })}}};if ($@){$_tt_error=$context->catch($@,\$output);die$_tt_error unless$_tt_error->type eq 'return'}return$output},DEFBLOCKS=>{},});