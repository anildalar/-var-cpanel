Template::Document->new({METADATA=>{'name'=>'/usr/local/cpanel/whostmgr/docroot/templates/limitbw.tmpl','modtime'=>'1728930269',},BLOCK=>sub {my$context=shift || die "template sub called without context\n";my$stash=$context->stash;my$output='';my$_tt_error;eval {BLOCK: {$output .= do {my$output='';$stash->set('breadcrumburl','/scripts2/limitbwlist');$stash->set('app_key','limit_bandwidth_usage');$stash->set('unlimited',($stash->get('bwlimit')eq 'unlimited')? 1 : 0);if ($stash->get('unlimited')eq 1){$stash->set('bwlimit','')}$output .= '<body>
<style type="text/css">
TABLE { width: 750px; }
TD { padding: 3px; }
</style>
<p><em>';$output .= $stash->get(['locale',0,'maketext',['Please note that these limits only apply to http bandwidth usage and not the total bandwidth usage for an account.' ]]);$output .= '</em></p>
<table class="tablecomplex2">
    <form method="POST" action="';$output .= $stash->get('cp_security_token');$output .= '/scripts2/dolimitbw">
    <tr>
        <td colspan="4" background="';$output .= $stash->get('bggif');$output .= '" class="cellheader">
        <div> <span class="b2">';$output .= $stash->get(['locale',0,'maketext',['Bandwidth Limiter' ]]);$output .= '</span></div>
        </td>
    </tr>
    <tr>
        <td class="lightbg">';$output .= $stash->get(['locale',0,'maketext',['User' ]]);$output .= '</td>
        <td class="lightbg">';$output .= $stash->get(['locale',0,'maketext',['Bandwidth Used' ]]);$output .= '</td>
        <td class="lightbg">';$output .= $stash->get(['locale',0,'maketext',['Bandwidth Limit' ]]);$output .= '</td>
        <td class="lightbg"></td>
   </tr>
   <tr>
        <td class="heavybg" align="left" valign="top">';$output .= do {my$output='';my$_tt_filter=$context->filter('html')|| $context->throw($context->error);$output .= $stash->get('user');&$_tt_filter($output)};$output .= ' (';$output .= do {my$output='';my$_tt_filter=$context->filter('html')|| $context->throw($context->error);$output .= $stash->get('domain');&$_tt_filter($output)};$output .= ') <input type="hidden" name="user" value="';$output .= do {my$output='';my$_tt_filter=$context->filter('html')|| $context->throw($context->error);$output .= $stash->get('user');&$_tt_filter($output)};$output .= '"></td>
        <td class="heavybg" align="right" valign="top">';$output .= $stash->get(['locale',0,'maketext',['[numf,_1] MB',$stash->get('used')]]);$output .= '</td>
        <td class="heavybg" align="left" valign="top">
                            <input type="radio" name="limit" value="unlimited" ';if ($stash->get('unlimited')){$output .= 'checked="checked"'}$output .= ' onclick="setUnlimited()" id="nolimit"/>
                                <label for="nolimit">';$output .= $stash->get(['locale',0,'maketext',['Unlimited' ]]);$output .= '</label>
                            <br/>
                            <input type="radio" name="limit" id="limit" value="fixed" onclick="setFixed()" ';if (!$stash->get('unlimited')){$output .= 'checked="checked"'}$output .= '/>
                            <input type="text" id="bwlimit" name="bwlimitfake" value="';$output .= $stash->get('bwlimit');$output .= '" onfocus="setFixed();"> ';$output .= $stash->get(['locale',0,'maketext',['[output,acronym,MB,Megabytes]' ]]);$output .= ' <img src="" alt="" id="bwlimit_error" class="no_panel"/>
                            <input type="hidden" name="bwlimit" id="bwlimitreal" value="" />
                            <br/>
        </td>
        <td class="heavybg"   valign="top"><input type="submit" id="submitIt" class="btn-primary" value="';$output .= $stash->get(['locale',0,'maketext',['Change' ]]);$output .= '"></td>
    </tr>
    </form>
</table>
<script type="text/javascript">

    var last_value = parseInt(\'';$output .= $stash->get('bwlimit');$output .= "') || '';\n    var bwlimit = document.getElementById('bwlimit');\n    var bwlimitreal = document.getElementById('bwlimitreal');\n    var nolimit = document.getElementById('nolimit');\n\n    var setHidden = function () {\n        bwlimitreal.value = (nolimit.checked) ? 'unlimited' : bwlimit.value;\n    }\n\n    var setUnlimited = function () {\n        last_value = bwlimit.value;\n        bwlimit.value = '';\n        validation.verify();\n        setHidden();\n    }\n\n    var setFixed = function () {\n        bwlimit.value=last_value;\n        document.getElementById('limit').checked=true;\n        validation.verify();\n        setHidden();\n    }\n\n    CPANEL.validate.validBWLimit = function (str) {\n        setHidden();\n        if (nolimit.checked) { return true; }\n        last_value=bwlimit.value;\n        if (bwlimit.value.length==0) { return false; }          // Can not be null\n        if (/^\\d+\$/.test(bwlimit.value)) { return true; } // simple integer\n        if (/[^\\d\\.e+]/i.test(bwlimit.value)) { return false; }  // Check for characters that are not numbers periods, e or +\n        if (/[e+]/i.test(bwlimit.value)) { // if e+ is present check the notation\n            //Scientific notiation rules\n            if (bwlimit.value.split(/e/i).length>2) {return false} // Can only have one e\n            if (bwlimit.value.split('+').length>2) {return false}  // Can only have one +\n            if (bwlimit.value.split(/e\\+/i).length<2) {return false} // Must have one e+ substring\n            if (/^e\\+/i.test(bwlimit.value)) {return false} // Can't start as e+\n            if (/e\\+\$/i.test(bwlimit.value)) {return false} // Can't end as e+\n            return (/((\\b[0-9]+)?\\.)?\\b[0-9]+([eE][-+]?[0-9]+)?\\b/i.test(bwlimit.value)); // And a more generic test...\n        }\n    }\n\n    var validation = new CPANEL.validate.validator(\"";$output .= $stash->get(['locale',0,'maketext',['Limit Bandwidth' ]]);$output .= '");
    validation.add(bwlimit, \'validBWLimit\', "';$output .= $stash->get(['locale',0,'maketext',['The bandwidth limit must be a number. Exponents are allowed (e.g. 1024e+3).' ]]);$output .= '");
    validation.attach();
    CPANEL.validate.attach_to_form(\'submitIt\', validation);

    setHidden();

</script>
';$context->include('master_templates/master.tmpl',{'theme'=>'yui','content',$output })}}};if ($@){$_tt_error=$context->catch($@,\$output);die$_tt_error unless$_tt_error->type eq 'return'}return$output},DEFBLOCKS=>{},});